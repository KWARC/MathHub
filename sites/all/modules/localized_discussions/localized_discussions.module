<?php
/**
 * implements hook_menu() - Called when loading the menu to create a new message
 */
function localized_discussions_menu() {
  $items = array();
  $items['post_local_discussion'] = array(
    'title' => 'Post Localized Discussion',
    'description' => 'Posts a Comment',
    'page callback' => 'localized_discussions_post_comment',
    'access callback' => 'localized_discussions_check_post_comment',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/localized_discussions'] = array(
    'title' => 'Localized Discussions configuration',
    'description' => 'Configure Localized Discussions. ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('localized_discussions_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Localized Discussions configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 * @return the newly built form
 */
function localized_discussions_config_form($form, &$form_state) {
  $form['localized_discussions_active_node_types_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Active Content Types'),
    '#default_value' => variable_get('localized_discussions_active_node_types_string', ""),
    '#description' => t('The machine name of the content types for which localized discussions will be enabled'),
  );
  $form['#validate'] = array('localized_discussions_config_validate');
  $form['#submit'] = array('localized_discussions_config_submit');
  return system_settings_form($form);
}

/**
 * validation function of localized discussions configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 */
function localized_discussions_config_validate($form, &$form_state) {
  $active_node_types = explode(" ", $form_state['values']['localized_discussions_active_node_types_string']);
  $all_node_types = node_type_get_types();

  foreach ($active_node_types as $node_type) {
    if (!isset($all_node_types[$node_type])) {
      form_set_error('localized_discussions_active_node_types_string', t($node_type . ' is not a valid content type'));       
    }
  }
}

/**
 * submit function of the localized discussions configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 */
function localized_discussions_config_submit($form, &$form_state) {
  $active_node_types = explode(" ", $form_state['values']['localized_discussions_active_node_types_string']);
  variable_set("localized_discussions_active_node_types", $active_node_types);   
}


function localized_discussions_get_active_node_types() {
  $nodes = variable_get("localized_discussions_active_node_types");
  return $nodes;
}

function localized_discussions_post_comment() {
	$params = array(
		'title' => $_POST['title'],
		'body' => $_POST['body'],
		'xml_id' => $_POST['xml_id'],
		'node_id' => $_POST['node_id']
	);
  global $user; // get user that is currently on the page
  $node = new stdClass();
  $node->title = $params['title'];
  $node->type = "local_discussion_question"; // or something along the lines of "node-question"
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; 
  $node->uid = $user->uid;
  $node->status = 1; // (1 or 0): published or not
  $node->promote = 0; // (1 or 0): promoted to front page
  $node->comment = 2; // 0 = comments disabled, 1 = read only, 2 = read/write
  // Term reference (taxonomy) field
  $node->body[$node->language][0]['value'] = $params['body'];
  $node->xml_fragment_id[$node->language][0]['value'] = $params['xml_id'];
  $node->referenced_nid[$node->language][0]['value'] = $params['node_id'];
  $node = node_submit($node); // Prepare node for saving
  node_save($node);
}

function localized_discussions_form_alter(&$form, &$form_state, $form_id) {
   if($form_id == 'local_discussion_question_node_form' && isset($_GET['xml_id']) && isset($_GET['node_id'])) {
    //getting data from get request
    $xml_id = $_GET['xml_id'];
    $node_id = $_GET['node_id'];
    //adding presentation of referenced node
    $ref_node_rendering = '<div id="referenced_node" style="display:none">' . node_view(node_load($node_id))['field_external']['0']['content']['#markup'] . '</div>';
    $label = '<label> Quoted Fragment </label>';
    $frag_container = '<div id="referenced_node_fragment_container"> </div>';
    $footer = '<small> <i> See the original article <a href="?q=/node/' 
        . $node_id 
        . '#'
        . $xml_id
        . '">here</a> </small></i>';

    $elem = $ref_node_rendering . $label . '<blockquote style="font-size:130%;">' . $frag_container . $footer . ' </blockquote>';

    $jsscript = '<script>
      var element = jQuery(document.getElementById("'. $xml_id .'")).clone();
      console.log(element);
      element.appendTo("#referenced_node_fragment_container"); 
    </script>';
    $form['referenced_node_rendering'] = array(
      '#markup' =>  $elem . $jsscript,
      '#weight' => -99.
      );
    //setting fields
    $form['xml_fragment_id']["und"][0]['value']['#default_value'] = $xml_id;
    $form['referenced_nid']["und"][0]['value']['#default_value'] = $node_id;
   }
}

function localized_discussions_get_comments($nid) { //get comments for a node
  $results = db_select('field_data_referenced_nid', 'g')
    ->fields('g', array("entity_id"))
    ->condition('referenced_nid_value', $nid, '=')
    ->execute()
    ->fetchAll();
  $comments = array();
  foreach ($results as $result) {
    $comments[] = $result->entity_id;
  }
  return $comments;
}

function localized_discussions_get_fields($ldid) {
  $ld = array('id' => $ldid);
  $result = db_select('field_data_xml_fragment_id', 'g')
    ->fields('g', array("xml_fragment_id_value"))
    ->condition('entity_id', $ldid, '=')
    ->execute()
    ->fetchAssoc();
  $ld['xml_fragment_id'] = $result['xml_fragment_id_value'];
  $result = db_select('field_data_referenced_nid', 'g')
    ->fields('g', array("referenced_nid_value"))
    ->condition('entity_id', $ldid, '=')
    ->execute()
    ->fetchAssoc();
  $ld['referenced_nid'] = $result['referenced_nid_value'];
  $result = db_select('field_data_body', 'g')
    ->fields('g', array("body_value"))
    ->condition('entity_id', $ldid, '=')
    ->execute()
    ->fetchAssoc();
  $ld['body'] = $result['body_value'];
  $result = db_select('node', 'g')
    ->fields('g', array("title"))
    ->condition('nid', $ldid, '=')
    ->execute()
    ->fetchAssoc();
  $ld['title'] = $result['title'];
  return $ld; 
}

function localized_discussions_node_view($node, $view_mode, $langcode) {
  $active_node_types = localized_discussions_get_active_node_types();
  if (in_array($node->type, $active_node_types)) { //for now
    drupal_add_js("var ld_nid = " . $node->nid . ";", 'inline');
    $ld_path = drupal_get_path('module', 'localized_discussions');
    jobad_add_module($ld_path . '/jobad/comment.js', "kwarc.mmt.localized_discussions");
    $cids = localized_discussions_get_comments($node->nid);
    foreach ($cids as $cid) {
      $fields = localized_discussions_get_fields($cid);
      $xml_id = $fields['xml_fragment_id'];
      $title = $fields['title']; 
      drupal_add_js('
          jQuery(function(){
            JOBAD1.Sidebar.registerNotification(document.getElementById("'.$xml_id.'"), 
              { 
                "class": "' . 'info' .'",
                "text": "' .  $title . '", 
                "click": function() {
                  window.open("/node/'.$cid.'");
                }
            });
          });', array('type' => 'inline', 'weight' => 100));
    }
  }
  if ($node->type == 'local_discussion_question') {
    // Display the original link
    $fields = localized_discussions_get_fields($node->nid);
    $ref_node_rendering = '<div id="referenced_node" style="display:none">' . node_view(node_load($fields['referenced_nid']))['field_external']['0']['content']['#markup'] . '</div>';
    $frag_container = '<p id="referenced_node_fragment_container"> </p>';
    $footer = '<small> <i> See the original article <a href="?q=/node/' 
        . $node->referenced_nid[$node->language][0]['value'] 
        . '#'
        . $node->xml_fragment_id[$node->language][0]['value']
        . '">here</a> </small></i>';

    $elem = '<blockquote>' .$ref_node_rendering . $frag_container . $footer . '</blockquote>';

    $jsscript = '<script>
      var element = jQuery(document.getElementById("'. $fields['xml_fragment_id'] .'")).clone();
      console.log(element);
      element.appendTo("#referenced_node_fragment_container"); 
    </script>';

    $node->content['body'][0]['#markup'] = $elem;
    $node->content['body'][0]['#markup'] .= $jsscript;
    $node->content['body'][0]['#markup'] .= $fields['body'];
    unset($node->content['xml_fragment_id']);
    unset($node->content['referenced_nid']);
  }
}

function localized_discussions_check_post_comment() {
  global $user;
  if ($user->uid) { // 0 is id of anonymous user
    return true;
  } else {
    return false;
  }
}


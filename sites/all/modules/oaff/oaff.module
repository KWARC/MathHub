<?php

/*************************************************************************
* This file is part of the MathHub.info System  (http://mathhub.info).   *
* It is hosted at https://github.com/KWARC/MathHub                       *
* Copyright (c) 2015 by the KWARC group (http://kwarc.info)              *
* Licensed under GPL3, see http://www.gnu.org/licenses/gpl.html          *
**************************************************************************/

require_once 'oaff.logger.php';
require_once 'oaff.features.php';
require_once 'oaff.admin.php';
require_once 'oaff.crawler.php';
require_once 'oaff.base.php';
require_once 'oaff.html_utils.php';

/**
 * Implements hook_menu
 * Adds entries for OAFF calculhmac(clent, data)onfiguration and auto-loading nodes (from location set in config) 
 */
function oaff_menu() {
  $items = array();
  $oaff_config = variable_get('oaff_config');
  $items['admin/config/content/mathhub'] = array(
    'title' => 'MathHub configuration',
    'description' => 'Configure MathHub',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oaff_mh_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/svg'] = array(
    'title' => 'SVG',
    'page callback' => 'oaff_node_svg',
    'page arguments' => array(1),
    'access callback' => 'oaff_access_by_node_type',
    'access arguments' => array(1, array(1=>'oaff_doc')),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['node/%node/omdoc'] = array(
    'title' => 'OMDoc',
    'page callback' => 'oaff_node_omdoc',
    'page arguments' => array(1),
    'access callback' => 'oaff_access_by_node_type',
    'access arguments' => array(1, array(1=>'oaff_doc')),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['node/%node/source'] = array(
    'title' => 'Source',
    'page callback' => 'oaff_node_source',
    'page arguments' => array(1),
    'access callback' => 'oaff_access_by_node_type',
    'access arguments' => array(1, array(1=>'oaff_doc')),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['report_issue/%get_destination'] = array(
    'title' => "Report Issue",
    'page callback' => 'oaff_report_issue',
    'access callback' => true,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'plid' => $oaff_config['menus']['help']['mlid'],
    'weight' => 10,
  );

  oaff_features_menu($items);
  oaff_admin_menu($items);
  oaff_crawler_menu($items);
  
  return $items;
}

function get_destination_to_arg() {
  $path = drupal_get_path_alias();
  return $path;
}

function oaff_permission() {
  return array(
    'administer mathhub' => array(
      'title' => t("Administer MathHub"),
      'description' => t("Perform administration and devel tasks in MathHub"),
    ),
  );
}

/**
 * implements hook_field_formatter_info, declares the formatter types implemented 
 * by this module.
 * Currently:  
 *   'mmt_formatter' which formats mmt content 
 */
function oaff_field_formatter_info() {
   return array(
    'oaff_help_formatter' => array(
      'label' => t('Formatter of Help Files'),
      'field types' => array('vfs_file'),
    ),
  );
}

function oaff_autogenerate_top_doc() {
  $html = "";
  $oaff_config= variable_get('oaff_config');
  $top_info = $oaff_config['metadata']['top'];
  $desc = ""; //default
  if (isset($top_info['description'])) {
    $desc = $top_info['description'];
  }
  $resp = ""; //default
  if (isset($top_info['responsible'])) {
    $resp .= "<p><strong>Responsible: </strong>" . $top_info['responsible'] . "</p>";
  }
  $html .= $desc;
  $html .= $resp;
  $html .= oaff_autogenerate_top_statistics();
  //adding group list
  $groups = planetary_repo_list("");
  $elems = array();
  $html .= "<ul>";
  foreach ($groups as $group) {
    if (planetary_repo_is_dir($group) && $group[0] != '.' && $group != "meta" && drupal_lookup_path('source', $group)) {
      $group_info = $oaff_config['metadata']['groups'][$group];
      $name = $group;
      if (isset($group_info['title'])) {
        $name = $group_info['title'];
      }
      $teaser = "";
      if (isset($group_info['teaser'])) {
        $teaser = $group_info['teaser'];
      }
      $html .= '<li> <a href="/' . $group . '">' . $name .  ' </a>  <small> '. $teaser .' </small></li>';

    }
  }
  $html .= "</ul>";
  
  return $html;
}

function oaff_autogenerate_top_statistics() {
  $oaff_config = variable_get('oaff_config');
  $stat = $oaff_config['top_stat'];
  $out = "<div class=\"panel panel-default\">\n";
  $out .= " <div class=\"panel-heading\" role=\"tab\" id=\"collapseStatistics\">\n";
  $out .= "   <strong><a onclick=\"jQuery('#statistics').collapse('toggle');\" style=\"cursor:pointer;\">";
  $out .= "Statistics";
  $out .= "</a></strong>\n";
  $out .= " </div>\n";
  $out .= " <div class=\"panel-collapse collapse\" id=\"statistics\" role=\"tabpanel\" >\n";
  $out .= "   <ul>\n";
  $out .= "     <li>Groups: " . $stat['group'] . "</li>\n";
  $out .= "     <li>Archives: " . $stat['archive'] . "</li>\n";
  $out .= "     <li>Views: " . $stat['view'] . "</li>\n";
  $out .= "     <li>Theories: " . $stat['theory'] . "</li>\n";
  $out .= "     <li>Definitions: " . $stat['definition'] . "</li>\n";
  $out .= "     <li>Constants: " . $stat['constant'] . "</li>\n";
  $out .= "     <li>Files: " . $stat['file'] . "</li>\n";
  $out .= "     <li>Size: " . oaff_filter_size($stat['size']) . "</li>\n";
  $out .= "   </ul>\n";
  $out .= " </div>\n</div>\n";
  return $out;  
}

function oaff_update_top_statistics() {
  $result = db_select('oaff_group_stat', 'g')
    ->fields('g')
    ->execute()
    ->fetchAll();
  $stat = array(
    'group' => 0,
    'archive' => 0, 
    'theory' => 0, 
    'definition' => 0, 
    'constant' => 0, 
    'view' => 0, 
    'file' => 0,
    'size' => 0,
  );
  foreach ($result as $key => $row) {
    $stat['group']++;
    $stat['archive'] += $row->archive;
    $stat['theory'] += $row->theory;
    $stat['definition'] += $row->definition;
    $stat['constant'] += $row->constant;
    $stat['view'] += $row->view;
    $stat['file'] += $row->file;
    $stat['size'] += $row->size;
  }
  $oaff_config = variable_get('oaff_config');
  $oaff_config['top_stat'] = $stat;
  variable_set('oaff_config', $oaff_config);
}

function oaff_autogenerate_group_doc($group) {
  $html = "";
  $oaff_config= variable_get('oaff_config');
  $group_info = $oaff_config['metadata']['groups'][$group];
  $desc = ""; //default
  if (isset($group_info['description'])) {
    $desc = $group_info['description'];
  }
  $resp = ""; //default
  if (isset($group_info['responsible'])) {
    $resp = "<p><strong>Responsible: </strong>" . $group_info['responsible'] . "</p>";
  }
  $html .= $desc;
  $html .= $resp;
  $html .=  oaff_autogenerate_group_statistics($group);
  //adding archive list
  $archives = planetary_repo_list($group);
  $html .= '<ul>';
  foreach ($archives as $archive) {
    $arch_path = oaff_base_join_path(array($group, $archive));
    if (planetary_repo_is_dir($arch_path) && $archive[0] != '.' && $archive != "meta-inf" && drupal_lookup_path('source', $arch_path)) { //valid archive
      $oaff_config = variable_get('oaff_config');
      $arch_info = $oaff_config['metadata']['archives'][$group][$archive];
      $name = $arch_path; // default
      if (isset($arch_info['title'])) {
        $name = $arch_info['title'];
      }
      $teaser = ""; // default    
      if (isset($arch_info['teaser'])) {
        $teaser = $arch_info['teaser'];
      }

      $html .= '<li> <a href="/' . $arch_path . '">' . $name .  ' </a>  <small> '. $teaser .' </small></li>';
    }
  }
  $html .= "</ul>";
  return $html;
}

/**
 * @param $group The group to get statistics for
 * @return Group statistics as a string
 */
function oaff_autogenerate_group_statistics($group) {
  $result = db_select('oaff_group_stat', 'g')
    ->fields('g')
    ->condition('mh_group', $group, '=')
    ->execute()
    ->fetchAssoc();
  $out = "<div class=\"panel panel-default\">\n";
  $out .= " <div class=\"panel-heading\" role=\"tab\" id=\"collapseStatistics\">\n";
  $out .= "   <strong><a onclick=\"jQuery('#statistics').collapse('toggle');\" style=\"cursor:pointer;\">";
  $out .= "Statistics";
  $out .= "</a></strong>\n";
  $out .= " </div>\n";
  $out .= " <div class=\"panel-collapse collapse\" id=\"statistics\" role=\"tabpanel\" >\n";
  $out .= "   <ul>\n";
  $out .= "     <li>Archives: " . $result['archive'] . "</li>\n";
  $out .= "     <li>Views: " . $result['view'] . "</li>\n";
  $out .= "     <li>Theories: " . $result['theory'] . "</li>\n";
  $out .= "     <li>Definitions: " . $result['definition'] . "</li>\n";
  $out .= "     <li>Constants: " . $result['constant'] . "</li>\n";
  $out .= "     <li>Files: " . $result['file'] . "</li>\n";
  $out .= "     <li>Size: " . oaff_filter_size($result['size']) . "</li>\n";
  $out .= "   </ul>\n";
  $out .= " </div>\n</div>\n";
  return $out;  
}

/**
 * Updates group statistics in the database
 * @param $group The group to update statistics for
 */
function oaff_update_group_statistics($group) {
  $result = db_select('oaff_archive_stat', 'a')
    ->fields('a')
    ->condition('mh_group', $group, '=')
    ->execute()
    ->fetchAll();
  $stat = array(
    'archive' => 0, 
    'theory' => 0, 
    'definition' => 0, 
    'constant' => 0, 
    'view' => 0, 
    'file' => 0,
    'size' => 0,
  );
  foreach ($result as $key => $row) {
    $stat['archive']++;
    $stat['theory'] += $row->theory;
    $stat['definition'] += $row->definition;
    $stat['constant'] += $row->constant;
    $stat['view'] += $row->view;
    $stat['file'] += $row->file;
    $stat['size'] += $row->size;
  }
  $group_path = "/var/data/localmh/MathHub/$group/";
  //$stat['size'] = (int) exec("du -s " . $group_path . " | cut -f1");
  db_merge('oaff_group_stat')
    ->key(array(
      'mh_group' => $group,
    ))
    ->fields($stat)
    ->execute();
}

function oaff_autogenerate_archive_doc($group, $archive) {
  $arch_path = oaff_base_join_path(array($group, $archive));
  $html = "";
  $oaff_config= variable_get('oaff_config');
  $arch_info = $oaff_config['metadata']['archives'][$group][$archive];
  $desc = ""; //default
  if (isset($arch_info['description'])) {
    $desc = $arch_info['description'];
  }
  $resp = ""; //default
  if (isset($arch_info['responsible'])) {
    $resp = "<p><strong>Responsible: </strong>" . $arch_info['responsible'] . "</p>";
  }
  $html .= $desc;
  $html .= $resp;
  $html .= oaff_autogenerate_archive_statistics($group, $archive);
  $style = 'planetary'; // default
  $format = $oaff_config['config']['libs'][$group][$archive];
  $filters = filter_list_format($format);
  if (isset($filters['mmt-presentation'])) {
    $style = $filters['mmt-presentation']->settings['mmt_style'];
  }
  $content_path = oaff_base_join_path(array($group, $archive, 'export/' . $style . '/narration', '.html'));
  $html .= "<div>" . mmt_get_pres_from_file($content_path) . "</div>";
  return $html;
}

/**
 * @param $group The group of the archive
 * @param $archive The archive to get statististics for
 * @return Archive statistics as a string
 */
function oaff_autogenerate_archive_statistics($group, $archive) {
  $result = db_select('oaff_archive_stat', 'a')
    ->fields('a')
    ->condition('mh_archive', $archive, '=')
    ->execute()
    ->fetchAssoc();
  $out = "<div class=\"panel panel-default\">\n";
  $out .= " <div class=\"panel-heading\" role=\"tab\" id=\"collapseStatistics\">\n";
  $out .= "   <strong><a onclick=\"jQuery('#statistics').collapse('toggle');\" style=\"cursor:pointer;\">";
  $out .= "Statistics";
  $out .= "</a></strong>\n";
  $out .= " </div>\n";
  $out .= " <div class=\"panel-collapse collapse\" id=\"statistics\" role=\"tabpanel\" >\n";
  $out .= "   <ul>\n";
  $out .= "     <li>Views: " . $result['view'] . "</li>\n";
  $out .= "     <li>Theories: " . $result['theory'] . "</li>\n";
  $out .= "     <li>Definitions: " . $result['definition'] . "</li>\n";
  $out .= "     <li>Constants: " . $result['constant'] . "</li>\n";
  $out .= "     <li>Files: " . $result['file'] . "</li>\n";
  $out .= "     <li>OMDoc size: " . oaff_filter_size($result['omdoc']) . "</li>\n";
  $out .= "     <li>Source size: " . oaff_filter_size($result['size']) . "</li>\n";
  $out .= "   </ul>\n";
  $out .= " </div>\n</div>\n";
  return $out;  
}

/**
 * Updates archive statistics in the database
 * @param $group The group of the archive
 * @param $archive The archive name to update statistics for
 */
function oaff_update_archive_statistics($group, $archive) {
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', $archive, '=')
    ->execute()
    ->fetchAssoc();
  $pid = $result['nid'];
  $file_nr = oaff_count_children($pid);

  $archive_path = "/var/data/localmh/MathHub/$group/$archive/source/";
  $omdoc_path = oaff_base_join_path(array("/var/data/localmh/MathHub", $group, $archive , 'content'));
  $stat_tags = array('theory' => '', 'definition' => '', 'constant' => '', 'view' => '');
  foreach ($stat_tags as $key => $value) {
    $stat_tags[$key] = exec('cd ' . $omdoc_path . '; fgrep "</' . $key . '>" * -R | wc -l');  
  }
  $source_size = (int) exec("du -s " . $archive_path . " | cut -f1");
  $omdoc_size = (int) exec("du -s " . $omdoc_path . " | cut -f1");
  db_merge('oaff_archive_stat')
    ->key(array(
      'mh_archive' => $archive,
      'mh_group' => $group,
    ))
    ->fields(array(
      'view' => $stat_tags['view'],
      'theory' => $stat_tags['theory'],
      'definition' => $stat_tags['definition'],
      'constant' => $stat_tags['constant'],
      'file' => $file_nr,
      'omdoc' => $omdoc_size,
      'size' => $source_size,
    ))
    ->execute();
}

/**
 * Function to convert from KB to closest highest unit
 * @param $kbytes int Number of KiloBytes
 * @param $round int Sets the number of decimal point
 * @return string Converted result
 */
function oaff_filter_size($kbytes, $round=0) {
  if ($kbytes >= 1073741824) {
    $kbytes = number_format($kbytes / 1073741824, $round) . 'T';
  } elseif ($kbytes >= 1048576) {
    $kbytes = number_format($kbytes / 1048576, $round) . 'G';
  } elseif ($kbytes >= 1024) {
    $kbytes = number_format($kbytes / 1024, $round) . 'M'; 
  } else {
    $kbytes = $kbytes . 'K'; 
  }
  return $kbytes;
}

/**
 * implements hook_filed_formatter view, 
 * @param $entity_type The type of $entity
 * @param $entity The entity being displayed
 * @param $field The field structure
 * @param $instance The field instance
 * @param $langcode The language associated with $items
 * @param $items Array of values for this field
 * @param $display The display settings to use, as found in the 'display' entry of instance definitions
 */
function oaff_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'oaff_help_formatter':
      $lang = $entity->language;
      foreach ($items as $delta => $item) {
        $location = $item['path'];
        if (planetary_repo_stat_file($location)) {
          $content = planetary_repo_load_file($location);
          try {
            $content = str_replace('xmlns=', 'ns=', $content); 
            $xml = new SimpleXMLElement($content, LIBXML_NOERROR);
            $titles = $xml->title;
            $frags = $xml->xhtmlfrag;
            if (count($titles) != 1 || count($frags) != 1) {
              throw new Exception("Invalid help node format");
            }
            $title = (string)$titles[0];
            $markup = "";
            foreach($frags[0]->children() as $elem) {
              $markup .= $elem->asXML();
            }
            //setting title to be later used for teaser
            $entity->title = $title;
            node_save($entity);
            drupal_set_title($title);
          } catch (Exception $e) {
            drupal_set_message("Invalid help node format, treating as plain html fragment", 'warning');
            $markup = $content;
          }
        } else {
          $segs = explode("/", $location); //format is "$base" / "help" / "index.html"
          if ($segs[0] == 'meta') { //at top level
            $markup = oaff_autogenerate_top_doc();
          } else if ($segs[1] == 'meta-inf') { //at group level
            $group = $segs[0];
            $markup = oaff_autogenerate_group_doc($group);
          } else { //at archive level
            $group = $segs[0];
            $archive = $segs[1];
            $markup = oaff_autogenerate_archive_doc($group, $archive);
          }
        }
        $element[$delta] = array(
          "#type" => "container",
          "#attributes" => array(),
          "content" => array(
            '#markup' => $markup,
          )
        );
      }
      break;
    }
  return $element;
}

function oaff_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'oaff_doc_node_form') {
    $nid = $form['#node']->nid;
    $form['title']['#disabled'] = TRUE;
    $form['field_external']['und'][0]['data']['path']['#disabled'] = TRUE;
    
    if (isset($_GET['start']) && isset($_GET['end'])) {
      $start = $_GET['start'];
      $end = $_GET['end'];
      drupal_add_js('
        jQuery(function() {
          var mytxt = jQuery("#edit-field-external-und-0-data-content-value").get(0);
          mytxt.focus();
          mytxt.setSelectionRange(' .$start. ',' .$end.');
        });
        ', 'inline');
    }
    //$form['actions']['submit']['#submit'] = array('oaff_mathhub_doc_act');
  }
}


function oaff_mathhub_doc_act($form, $form_state) {
  $variants = $form_state['values']['variants'];
  foreach ($variants as $variant) {
    $location = $form_state['values'][$variant]['location'];
    $body = $form_state['values'][$variant]['body']['value'];
    if ($form['content'][$variant]['body']['#default_value'] != $body) { // something changed
      planetary_repo_save_file($location, $body);
    }
  }
  $nid = $form['#node']->nid;
  $alias = drupal_get_path_alias('node/' . $nid);
  drupal_goto($alias);
}


function oaff_contextual_basic($form, &$form_state) {
  $form = array();
  
  return $form;
}

function oaff_contextual_info($form, &$form_state, $key) {
  $form = array();
  
  $result = "test";
  
  $form["log"] =
    array(
          "#markup" => "<pre>". $result . "</pre>",
          );

  $form["result"] =
    array(
          "#markup" => "<pre>". $result . "</pre>",
          );

  return $form;
}

/**
 * Function to setup OAFF-specific functionality (CSS & JS) on page
 * OAFF-feature modules (e.g. MMT) define their own initialize methods 
 * to load further features (e.g. JOBAD modules)
 * Typically called from hook_node_view (i.e. for OAFF, oaff_node_view)
 * @param $location Path
 * @param $text_format Text format
 */
function oaff_initialize($location = NULL, $text_format = "") {
    if ($location != NULL) {
      // oaff_initialize
      $pathinfo = oaff_base_get_path_info($location);
      $archive = $pathinfo['archive'];
      $group = $pathinfo['group'];
      $rel_path = $pathinfo['rel_path'];
      
      //adding data as js variables (used by JS/JOBAD modules)
      drupal_add_js("var oaff_node_group = '$group';", "inline");
      drupal_add_js("var oaff_node_archive = '$archive';", "inline");
      drupal_add_js("var oaff_node_rel_path = '$rel_path';", "inline");      

      // get list of all filters used in $text_format
      $filter_list = filter_list_format($text_format);
      //TODO: HACK, fix this later
      if ($pathinfo['dimension'] == "META-INF") {
        $filter_list[] = 'mmt-presentation';
      }
      /* CSS */
      $mmt_path = drupal_get_path('module', 'mmt');
      $mmt_config = variable_get('mmt_config');
      $mmt_url = $mmt_config['mmturl'];  

      // add js depending on filter activated for $text_format
      foreach ($filter_list as $filter => $value) {
        switch ($filter) {
          case 'mmt-presentation':
            drupal_add_css($mmt_path . '/css/mmt.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
            // mmt js libs
            drupal_add_js($mmt_path . '/utils/mmt-html.js', 'file', array('cache' => false));
            drupal_add_js($mmt_path . '/utils/mmt-planetary.js', 'file', array('cache' => false));
            drupal_add_js($mmt_path . '/utils/planetary-localization.js', 'file', array('cache' => false));

            drupal_add_js($mmt_path . '/utils/mathml.js', 'file', array('cache' => false));
            jobad_add_module($mmt_path . '/jobad/planetary-navigation.js', "kwarc.mmt.planetary.navigation");
            jobad_add_module($mmt_path . '/jobad/ontology-navigation.js', "kwarc.mmt.ontology.navigation");
            jobad_add_module($mmt_path . '/jobad/hovering.js', "kwarc.mmt.hovering");
            jobad_add_module($mmt_path . '/jobad/planetary-gitlab.js', "kwarc.mmt.planetary.gitlab");

            if (isset($value->settings['mmt_style']) 
              && $value->settings['mmt_style'] == 'html') {
              jobad_add_module($mmt_path . '/jobad/interactive-viewing.js', "kwarc.mmt.intvw");
            }
            break;

          case 'local-compilation':
            drupal_add_css($mmt_path . '/css/latexml.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
            break;

          default:
            break;
        }
      }

      /* JavaScript */
      drupal_add_js('var mmtUrl = "' . $mmt_url . '";', 'inline');
      // if search enabled
      // jobad_add_module($mmt_path . '/jobad/search.js', "kwarc.mmt.search");
    }  

    libraries_load("jobad");
    // modules are loaded in specific oaff extensions (e.g. MMT)
    jobad_add_module("/sites/all/libraries/jobad/modules/core/mathjax.mathjax.js", "mathjax.mathjax");//a
    
    $inst_name = jobad_initialize();
    //mmt_initialize(); //should be before -- currently called from mmt_node_view hook instead
    return $inst_name; 
}

/**
 * Implements hook_node_view
 * @param $node The node that is being assembled for rendering.
 * @param $view_mode The $view_mode parameter from node_view() (e.g. "full").
 * @param $langcode The language code used for rendering.
 */
function oaff_node_view($node, $view_mode, $langcode) {
  if ($view_mode != "full")
		return;
  
  $oaff_config = variable_get('oaff_config');
  //handling node rendering
  $compiled_node_types = $oaff_config['compiled_node_types'];
  $all_node_types = $oaff_config['all_node_types'];

  if (drupal_get_path_alias("node/" . $node->nid) == 'mh/glossary') { //special handling for the glossary node
    $markup = file_get_contents("/var/data/localmh/MathHub/glossary.html");
    //loading js/css manually for the glossary, not using oaff initialize
    $mmt_path = drupal_get_path('module', 'mmt');
    $oaff_path = drupal_get_path('module', 'oaff');
    // basics
    drupal_add_js($oaff_path . '/scripts/glossary.js', 'file', array('cache' => false));
    drupal_add_css($oaff_path . '/css/glossary.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
    drupal_add_css($mmt_path . '/css/mmt.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
    drupal_add_css($mmt_path . '/css/latexml.css', array('weight' => PHP_INT_MAX, 'every_page' => false));

    // mmt js libs
    drupal_add_js($mmt_path . '/utils/mmt-html.js', 'file', array('cache' => false));
    drupal_add_js($mmt_path . '/utils/planetary-localization.js', 'file', array('cache' => false));
    drupal_add_js($mmt_path . '/utils/mmt-planetary.js', 'file', array('cache' => false));
    drupal_add_js($mmt_path . '/utils/mathml.js', 'file', array('cache' => false));
    //jobad modules 
    jobad_add_module($mmt_path . '/jobad/planetary-navigation.js', "kwarc.mmt.planetary.navigation");
    jobad_add_module($mmt_path . '/jobad/ontology-navigation.js', "kwarc.mmt.ontology.navigation");
    jobad_add_module($mmt_path . '/jobad/hovering.js', "kwarc.mmt.hovering");
    jobad_add_module("/sites/all/libraries/jobad/modules/core/mathjax.mathjax.js", "mathjax.mathjax");
    
    //mmt url   
    $mmt_config = variable_get('mmt_config');
    $mmt_url = $mmt_config['mmturl'];  
    drupal_add_js('var mmtUrl = "' . $mmt_url . '";', 'inline');

    libraries_load("jobad");
    $inst_id = jobad_initialize();

    $node->content['body'][0]['#markup'] = '<div id="' . $inst_id . '" class="bootstrap" >' . $markup . '</div>';
  }

  // actually presenting
  if (in_array($node->type, $compiled_node_types)) {
    //getting node data
    $location = $node->field_external['und']['0']['path'];
    $status = oaff_get_errors($node->nid);

    $fatals = oaff_get_errors($node->nid, array(3));
  	if ($fatals) { // fatals exists for this node => time to report errors  
      $location = $node->field_external['und']['0']['path'];
      $source = planetary_repo_load_file($location);
      $output = oaff_mark_source_errors(check_plain($source), $node->nid, $status);
      $output .= oaff_get_log_html($status);
      $node->content['field_external'][0]['content']['#markup'] = $output;      
    } else {
      $location = $node->field_external['und']['0']['path'];
      $source = planetary_repo_load_file($location);
    	$content = $node->content['field_external'][0]['content']['#markup'];
      $node->content['field_external'][0]['content']['#markup'] = $content . oaff_get_log_html($status);
	  }
  }

  // case for normal nodes
  // settings breadcrumb

  if (in_array($node->type, $all_node_types)) {
    // add variable to set the language of context menu
    if (isset($node->language) && $node->language != 'und')
      drupal_add_js("var language = \"" . $node->language . "\";", "inline");
    $location = $node->field_external['und']['0']['path'];
    oaff_set_breadcrumb($node->nid);
    $inst_id = oaff_initialize($location, oaff_get_node_filter_format($node));
    $content = $node->content['field_external'][0]['content']['#markup'];
    $node->content['field_external'][0]['content']['#markup'] = 
        '<div id="' . $inst_id . '" class="bootstrap" >' . $content . '</div>';
  }

}

/**
* Return the machine name of text format of the node
* @param $node Node
*/
function oaff_get_node_filter_format($node) {
  return $node->field_external['und'][0]['filter'];
}

// if option set to 0 returns raw svg content
function oaff_svg_html($pathinfo) {
  $relpath = $pathinfo['rel_path'];
  $args = explode(".", $relpath);
  if (count($args) == 1) {
    $svgname = oaff_base_join_path(array($relpath, ".svg"));
  } else {
    array_pop($args);
    $svgname = implode(".",$args) . ".svg";
  }
  $svg_content = planetary_repo_load_file(oaff_base_join_path(array($pathinfo['group'], $pathinfo['archive'], "export/svg/narration", $svgname)));
  return $svg_content; 
}


function oaff_save_error_status($nid, $compiler, $status) {
  $path = drupal_get_path_alias('node/' . $nid);
  $pathinfo = oaff_base_get_path_info($path);
  $group = $pathinfo['group'];
  $archive = $pathinfo['archive'];
  $type_map = array("Info" => 0, "Warning" => 1, "Error" => 2, "Fatal" => 3);
  if ($status['conversion'] != -1 ) { // -1 means log not re-read
    //delete old errors -- if any
    db_delete('oaff_errors')
        ->condition(db_and()->condition('nid', $nid)->condition('compiler', $compiler))         
        ->execute();
    //add new ones
    foreach ($status['messages'] as $msg) {
      $short_msg = $msg['shortMsg'];
      if (strlen($short_msg) > 1000) {// limiting size to under 1023 to fit in db
        $short_msg = substr($short_msg, 0, 1000) . " ...";
      }
      $long_msg = $msg['longMsg'];
      if (strlen($long_msg) > 2000) {// limiting size to under 2047 to fit in db
        $long_msg = substr($long_msg, 0, 2000) . " ...";
      }

      $type = $type_map[$msg['type']]; // converting string to integer err format
      $srcref = ""; // default
      if (isset($msg['srcref'])) {
        $srcref .= $msg['srcref']['from']['line'] . "." . $msg['srcref']['from']['col'] . "-" ;
        $srcref .= $msg['srcref']['to']['line'] . "." . $msg['srcref']['to']['col'];
      } 

      $query = db_insert('oaff_errors')
      ->fields(array(
        'nid' => $nid,
        'type' => $type_map[$msg['type']],
        'compiler' => $compiler,
        'mh_group' => $group,
        'mh_archive' => $archive,
        'short_msg' => $short_msg,
        'long_msg' => $long_msg,
        'srcref' => $srcref))
      ->execute();
    }
  }
}
  
function oaff_get_errors($nid, $levels = array(0,1,2,3)) { // by default get all error levels
  $result = db_select('oaff_errors', 'e')
    ->fields('e')
    ->condition(db_and()->condition('nid', $nid, '=')->condition('type', $levels, 'IN'))
    ->execute()
    ->fetchAll();
  return $result;
}



function oaff_get_log_html($status) {
  $color_catalog = array(0 => "#9999FF", 1 => "#BBBB00", 2 => "#FF6666", 3 => "#FF2222");
  $error_catalog = array(0 => "Info", 1 => "Warning", 2 => "Error", 3 => "Fatal");
  $conv_status_catalog = array(0 => "<span style='color:#9999FF'>Conversion Succeeded<span>", 
                               1 => "<span style='color:#BBBB00'>Conversion Succeeded (with warnings)<span>", 
                               2 => "<span style='color:#FF6666'>Conversion Succeeded (with errors)<span>", 
                               3 => "<span style='color:#FF2222'>Conversion Failed<span>");


  $conversion_status = 0; //assuming success
  $errors = array(0 => array(), 1 => array(), 2 => array(), 3 => array());
  $data_title_content = array(); // store (title, content) dictionaries

  foreach ($status as $msg) {
    $errors[3 - $msg->type][] = $msg; //reversing things to show more severe errors first
    $conversion_status = max($conversion_status, $msg->type);
  }

  // if success don't show log
  if ($conversion_status == 0) {
    $log = '<hr/> <div> <p> ' . $conv_status_catalog[$conversion_status] .'</p></div>';
  } else {
    // creating log
    $log = '<hr/> <div> <p> ' . $conv_status_catalog[$conversion_status] . ' <a style="cursor:pointer;" onclick="if (jQuery(this).html() == \'Show Log\') {jQuery(this).html(\'Hide Log\')} else {jQuery(this).html(\'Show Log\')}; jQuery(\'#oaff_error_log\' ).toggle( \'fold\' );" >Show Log</a> ';
    $log .= '</p> </div>';
    $log .= '<div id="oaff_error_log" style="display: none;"><ul>';
    foreach ($errors as $err_level) {
      foreach($err_level as $msg) {
        $log .= "<li>";
        $srcref_msg = '';
        if ($msg->srcref) {
          $srcref_msg .= 'at ' . $msg->srcref;
        }

        $short_msg = check_plain($msg->short_msg);
        $long_msg = check_plain($msg->long_msg);
        $color = $color_catalog[$msg->type];
        $log .= "<p><b>$msg->compiler</b> <u style=\"color:{$color}\"> {$error_catalog[$msg->type]} $srcref_msg </u> : $short_msg </p>";
        $log .= "<pre> $long_msg </pre>";
        $log .= "</li>"; 
      }
    }
    $log .= "</ul></div>";
  }
  return $log;
}



/**
 * function to mark errors, annotates source string with error information
 * @param $source the source string
 * @param $nid the node id
 * @param $status the error array 
 * @return the processed string (with errors marked)
 */
function oaff_mark_source_errors($source, $nid, $status) {
  $error_catalog = array(0 => "Info", 1 => "Warning", 2 => "Error", 3 => "Fatal");

  // separate errors by compilers
  $errors_compiler = array();
  foreach ($status as $key => $value) {
    if (!isset($errors_compiler[$value->compiler]))
      $errors_compiler[$value->compiler] = array(); 
    $errors_compiler[$value->compiler][] = $value; 
  }

  // collect unique references
  $srcrefs = array();
  foreach ($status as $key => $error) {
    if ($error->srcref != "") {
      $pcs = explode("-", $error->srcref);
      $srcrefs[$pcs[0]] = 0; 
      
      //
      $to = explode(".", $pcs[1]);
      $to_line = $to[0];
      $to_column = (string) (1 + (int) $to[1]); 
      $srcrefs[(implode(".", array($to_line, $to_column)))] = 0;
    }
  }

  $srcrefs = array_keys($srcrefs);
  sort($srcrefs);

  // separating to the array where keys are line numbers
  $refs = array();
  foreach ($srcrefs as $srcref) {
    $slices = explode(".", $srcref);
    $ref = (int) $slices[0];
    if (!isset($refs[$ref]))
      $refs[$ref] = array();
    $refs[$ref][] = (int) $slices[1];
  }

  $lines = explode("\n", $source);
  $line_offsets = array(0);
  $i = 0;
  $new_lines = array();
  while ($i < count($lines)) {
    $line_offsets[] = $line_offsets[$i] + strlen($lines[$i]);
    $i += 1;
  }

  $source = _tokenize_source($source, $refs);

  $out = "";

  $notification_counter = 0;
  $inst_id = oaff_initialize();
  foreach ($errors_compiler as $compiler => $errors) {
    $register = "";
    $unregister = "";
    $selector = "";
    $out .= '
    <label class="btn btn-primary btn-sm">
      <input id="'. $compiler . '" type="checkbox"> '. $compiler . ' 
    </label>';
    foreach ($errors as $msg) {
      // errors with references
      if ($msg->srcref) {
        $parts = explode("-",$msg->srcref);
        $from_parts = explode(".",$parts[0]);
        $to_parts = explode(".", $parts[1]);

        $from_line = $from_parts[0]; 
        $from_col = $from_parts[1];
        $from = $line_offsets[$from_line - 1] + $from_col; //-1 since arrays start at 0, line numbers at 1
        $to_line = $to_parts[0];
        $to_col = $to_parts[1];
        $to = $line_offsets[$to_line - 1] + $to_col; //-1 since arrays start at 0, line numbers at 1
        
        
        // select several spans
        $ids = _get_middle_elements($srcrefs, $parts[0], $parts[1]);
        $selector ="";
        $last_key = count($ids) - 1;
        foreach ($ids as $key => $id) {
          $selector .= "#ref_" . str_replace(".", "_", $id);
          if ($key != $last_key)
            $selector .= ", ";
        }
        $edit_query = '?start=' . $from . '&end=' . $to;
      } else {
        // errors w/o references assign to whole source code
        $selector = "#ref_general";
        $edit_query = "";
      }
      $register .= '
        n'. $notification_counter . ' = ' . $inst_id .'.Sidebar.registerNotification(jQuery("' . $selector . '"), 
            { 
              "class": "' . strtolower($error_catalog[$msg->type]) .'",
              "text": "' .  str_replace('"', "'", $msg->short_msg) . '", 
              "click": function() {
                window.open("/node/'.$nid.'/edit' . $edit_query . '");
              },
              "trace":true,
          });';
      $unregister .= '
          '. $inst_id .'.Sidebar.removeNotification(n' . $notification_counter . ');'; 
      $notification_counter++;
    }

    // js to constantly check checkboxes status
    $sidebar = "jQuery(function(){
       jQuery('#{$compiler}').change(function(){
          if(jQuery(this).is(':checked')) {
              $register
          } else {
              $unregister
          }
       });
    });";

    drupal_add_js($sidebar, array('type' => 'inline', 'weight' => 100));
  }

  // if there are errors add them to outpu
  if ($out != "") {
    $out = '<div>
    <label> Compilers </label> 
    <div class="btn-group" data-toggle="buttons">'.
      $out .'
    </div>
</div><br/>';
  }

  $out .= "<div id=\"$inst_id\"><pre id=\"ref_general\">\n" . $source . "\n</pre></div>";
  return $out;
}

/**
* separates $source by spans with id="ref_{line number}_{column number}"
* @param $source string to tokenize
* @param $srcref array where
*        key is line number
*        value is array of column numbers
* @return tokenized string
*/ 
function _tokenize_source($source, $srcref) {
  $lines = explode("\n", $source);
  $line_offsets = array(0);
  $i = 0;
  $close_tag = false;
  foreach ($srcref as $line_num => $char_nums) {
    $line = $lines[$line_num - 1];
    $new_line = "";
    if ($char_nums[0] != 1)
      $new_line .= substr($line, 0, $char_nums[0] - 1);
    if ($close_tag) {
      $new_line .= "</span>";
      $close_tag = false;
    }
    for ($j = 0; $j < count($char_nums) - 1; $j++) {
      $new_line .= "<span id=\"ref_{$line_num}_{$char_nums[$j]}\">";
      $new_line .= substr($line, $char_nums[$j] - 1, $char_nums[$j+1] - $char_nums[$j]);
      $new_line .= "</span>";
    }
    $new_line .= "<span id=\"ref_{$line_num}_" . $char_nums[count($char_nums)-1] . "\">";
    $new_line .= substr($line, $char_nums[count($char_nums)-1]-1);
    $close_tag = true;
    $lines[$line_num - 1] = $new_line;
  }
  $source = implode("\n", $lines);
  if ($close_tag)
    $source .= "</span>"; 
  return $source;
}


/**
* @param $array array sorted in increasing order by value
* @param $from value from which begin collecting values
* @param $to value from/after which stop collecting values
* @return array of values between $from and $to, including $from
*/
function _get_middle_elements($array, $from, $to) {
  $out = array();
  $in_middle = false;
  foreach ($array as $key => $value) {
    if ($value >= $to)
      break;
    if ($value == $from) {
      $in_middle = true;
    }
    if ($in_middle)
      $out[] = $value;
  }
  return $out;
}


// ------------------------------- OAFF Autoload Crawler -------------------------------- \\

function oaff_create_menu_link($path, $title, $weight, $plid = NULL, $expanded = 0, $options = array()) {
  $arch_item = array(
    'link_path' => $path,
    'link_title' => $title,
    'weight' => $weight,
    'menu_name' => 'main-menu',
    'options' => $options,
    'expanded' => $expanded,
    'plid' => $plid,
  );
  $mlid = menu_link_save($arch_item);
  return $mlid;
}

/**
* Updates children of the nodes and deletes nodes associated
* with deleted files
* @param $pid nid of the parent node
* @param $ncids new children of the parent node
*/
function oaff_update_children($pid, $ncids) {
  // get ids of old children of $pid
  $ocids = oaff_get_children($pid);
  // get nids of nodes associated with deleted files/folders
  $deleted_ids = array_diff($ocids, $ncids);
   
  foreach ($deleted_ids as $key => $nid) {
    node_delete($nid);
    db_delete('oaff_node_parents')
    ->condition('cid', $nid)
    ->execute();
  }

  $oaff_config = variable_get('oaff_config');
  $oaff_config['crawler']['deleted_nodes'] += count($deleted_ids); // count deleted nodes
  variable_set('oaff_config', $oaff_config);

  oaff_set_children($pid, $ncids);
}

/**
 * Get children nids of the parent nid
 * @param $pid Node id of the parent node
 * @return Array of nids
 */
function oaff_get_children($pid) {
  $result = db_select('oaff_node_parents', 'p')
      ->fields('p', array('cid'))
      ->condition('pid', $pid)
      ->execute()
      ->fetchAllAssoc('cid', PDO::FETCH_BOTH);

  $result = array_map('_oaff_extract_cid', $result);
  return  $result;
}

/**
 * Count recursively all children, grand children, etc. of the parent
 * @param $pid int nid of the parent node
 * @return int number of children, grand children, etc.
 */
function oaff_count_children($pid) {
  $node = node_load($pid);
  if (!$node)
    return 0; // no node exists
  $type = $node->type;
  if ($type == 'oaff_doc')
    return 1;
  if ($type == 'oaff_helpdoc' || $type == 'oaff_virtdoc') {
    $result = oaff_get_children($pid);
    $result = array_map('oaff_count_children', $result); 
    $result = array_sum($result); 
    return $result;
  }
  return 0;
}

function _oaff_extract_cid($el) {
  return $el['cid'];
}

/**
 * Explicitly save the parent-child relation of oaff nodes in the database (e.g. for building breadcrumb or menu later)
 * @param $pid the node id of the parent node
 * @param $cids the ids of the children 
 */
function oaff_set_children($pid, $cids) {
  foreach ($cids as $cid) {
    db_merge('oaff_node_parents')
      ->key(array(
          'cid' => $cid,
          'pid' => $pid,
        ))
      ->execute();
  }
}

function oaff_remove_child($cid) {
  db_delete('oaff_node_parents')
  ->condition('cid', $cid)
  ->execute();
}

function oaff_set_mtime($nid, $mtime, $file, $comp) {
  $old = oaff_get_mtime($nid, $file);
  if ($old == "") { //not set
    db_insert('oaff_node_mtime')
      ->fields(array(
        'nid' => $nid,
        'mtime' => $mtime,
        'logfile' => $file,
        'compiler' => $comp,
      ))
      ->execute();
  } else { //updating
    db_update('oaff_node_mtime')
      ->fields(array(
        'mtime' => $mtime,
      ))
      ->condition('nid', $nid, '=')
      ->condition('logfile', $file, '=')
      ->execute();
  }
}

function oaff_get_mtime($nid, $file) {
  $result = db_select('oaff_node_mtime', 'm')
      ->fields('m', array("mtime"))
      ->condition('nid', $nid, '=')
      ->condition('logfile', $file, '=')
      ->execute()
      ->fetchAssoc();
  return $result['mtime'];
}

function oaff_get_mtimes($nid) {
  $results = db_select('oaff_node_mtime', 'm')
      ->fields('m', array("mtime", 'logfile'))
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAll();
  return $results;
}

/**
 * function to set breadcrumb when viewing oaff nodes
 * adds, in order, links to OAFF ancestor nodes to the native drupal breadcrumb
 * @param $nid the id of the node for which to construct breadcrumb
 * @param $extra_pids array of node ids the links of which are added to the breadcrumb
 */
function oaff_set_breadcrumb($nid, $extra_pids = array()) {
  $oaff_config = variable_get('oaff_config');
  $l_nid = $oaff_config['libraries_nid'];
  $found_root = false;
  $pids = $extra_pids;
  while (!$found_root) {
    $last = $nid;
    if (count($pids) > 0) {
      $last = $pids[count($pids) - 1];
    }
    $result = db_select('oaff_node_parents', 'c')
      ->fields('c', array("pid"))
      ->condition('cid', $last, '=')
      ->execute()
      ->fetchAssoc();
    if (!isset($result['pid'])) {// not an oaff node
      return 0; // nothing to do
    }
    $pid = $result['pid'];
    $pids[] = $pid;
    if ($pid == $l_nid) {
      $found_root = true;
    }
  }
  $bc_entries = array();
  foreach ($pids as $pid) {
    $result = db_select('node', 'n')
      ->fields('n', array("title"))
      ->condition('nid', $pid, '=')
      ->execute()
      ->fetchAssoc();
    $path = drupal_get_path_alias('node/' . $pid);
    $title = $result['title'];
    $bc_entries[] =  '<a href="/' . $path . '">' . $title . '</a>';
  }
  $bc_entries[] = '<a href="/">Home</a>';
  $new_bc = array_reverse($bc_entries);
  drupal_set_breadcrumb($new_bc);
}
// ############################# End OAFF Autoload Crawler ########################### \\


/**
* Function that returns formated SVG for the given node that can be panned and zoomed
* @param $node The node to generate SVG for
*/
function oaff_node_svg($node) {
  $nid = $node->nid;
  $location = $node->field_external['und']['0']['path'];
  $alias = oaff_base_get_path_info($location)['alias'];
  oaff_set_breadcrumb($nid, array($nid));
  // script for zoom and pan
  $oaff_path = drupal_get_path('module', 'oaff');
  $svg_script = '/' . $oaff_path . '/scripts/svg-pan-zoom.js';
  drupal_add_js($svg_script, 'file');
  
  // modules
  $inst_id = oaff_initialize($location, oaff_get_node_filter_format($node));

  // activate zoom and pan of SVG
  $activate_pan_zoom = 
    '// Don\'t use window.onLoad like this in production, because it can only listen to one function.
      window.onload = function() {
        // Expose to window namespase for testing purposes
        window.zoomTiger = svgPanZoom(\'#node-svg\', {
          zoomEnabled: true,
          controlIconsEnabled: true,
          fit: true,
          center: true,
          viewportSelector: document.getElementById(\'node-svg\').querySelector(\'#wrapper\')
        });
      };';

  $pathinfo = oaff_base_get_path_info($location);
  $out = oaff_svg_html($pathinfo);
  $content = 
'   <div id="' . $inst_id . '" style="border:3px solid #5DBCD2; border-radius: 5px;">' . 
        oaff_svg_clean($out) .
'   </div>
    <script>
      ' . $activate_pan_zoom . '    
    </script>';  
  if (isset($_GET['view'])) {
    oaff_generate_blank_page(($node->title) . ' | SVG' , $content);
  } else {
    $out = "<a class=\"btn btn-default btn-sm\" target=\"_blank\" href=\"/" . 
          $alias . "%21svg?view=full\" role=\"button\">Full screen</a>" . $content;
   ; 
    return $out;
  }
}


/**
* Returns SVG as a string where header is replaced to allow panning and zoom functionality
* @param $svg SVG as a string
*/
function oaff_svg_clean($svg) {
  $out = substr($svg, strpos($svg, '<svg'));
  $out = substr($out, strpos($out, '>')+1);
  $out = substr($out, 0, strpos($out, '</svg>'));
  $out = 
      "\n<svg id=\"node-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"720px\" width=\"100%\">" .
      "\n<g id=\"wrapper\">" . $out . "\n</g></svg>";
  return $out;
}

/**
* Returns true if access is allowed to the current node
* @param $node The node to check access for
* @param $node_types Array of node types that can be accessed
*/
function oaff_access_by_node_type($node, $node_types) {
  if (array_search($node->type, $node_types) != false) 
    return true;
  return false;
}

/**
* Generates OMDoc of the node
* @param $node The node to get OMDoc for
*/
function oaff_node_omdoc($node) {
  $nid = $node->nid;
  $location = $node->field_external['und']['0']['path'];
  oaff_set_breadcrumb($nid, array($nid));
  // change path extension of file from .* to .omdoc
  $pathinfo = oaff_base_get_path_info($location);
  $omdoc_location = oaff_base_join_path(array($pathinfo['group'], $pathinfo['archive'], 'latexml', $pathinfo['rel_parent'], $pathinfo['title'] . '.omdoc'));
  $omdoc = ""; //default
  if (planetary_repo_stat_file($omdoc_location)) { //omdoc exists
    $omdoc = planetary_repo_load_file($omdoc_location);
  }
  return "<pre>\n" . check_plain($omdoc) . "\n</pre>";
}

/**
* Returns source code of the document of the node
* @param $node The node to get source code for
*/
function oaff_node_source($node) {
  $nid = $node->nid;
  $location = $node->field_external['und']['0']['path'];
  oaff_set_breadcrumb($nid, array($nid));
  $source = planetary_repo_load_file($location);
  $status = oaff_get_errors($nid);
  $output = oaff_mark_source_errors(check_plain($source), $nid, $status);
  return $output; 
}

/**
* @return Javascript for the current node as a string. Should
* be included in the head of the page.
*/
function oaff_get_js_as_string() {
  $scripts = drupal_add_js();
  planetary_libs_js_alter($scripts);
  $base_url = $GLOBALS['base_url'];
  $out = '';
  foreach ($scripts as $key => $script) {
    // ignore drupal related scripts
    if ($key === 'settings' 
      || $key === "misc/drupal.js"
      || $key === "sites/all/modules/devel/devel_krumo_path.js")
      continue;
    switch ($script['type']) {
      case 'external':
        $path = $script['data'];
        $out .= "<script src=\"$path\"></script>\n";
        break;

      case 'file':
        $path = $script['data'];
        if ($path[0] != '/')
          $path = '/' . $path;
        $out .= "<script src=\"{$base_url}{$path}\"></script>\n";
        // add bootstrap manually after jQuery. TODO
        if ($key === 'misc/jquery.js')
          $out .= "<script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.2/js/bootstrap.min.js\"></script>\n";
        break;

      case 'inline':
        $data = $script['data'];
        $out .= "<script>$data</script>\n";
        break;
      
      default:
        break;
    }
  }
  return $out;
}

/**
* @return CSS for the current node as  a string. Should
* be included in the head of the page.
*/
function oaff_get_css_as_string() {
  $csss = drupal_add_css();
  planetary_libs_css_alter($csss);
  $base_url = $GLOBALS['base_url'];
  // add bootstrap manually after jQuery. TODO
  $out = '<link type="text/css" rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css" media="all" />';
  foreach ($csss as $key => $css) {
    $path = $css['data'];
    // ignore drupal internal css
    if (startsWith($path, 'modules'))
      continue;
    if ($path[0] != '/')
      $path = '/' . $path;
    $out .= "<link type=\"text/css\" rel=\"stylesheet\" href=\"{$base_url}{$path}\" media=\"all\" />\n";
  }
  return $out;
}

/** 
* Generates blank page (page w/o Drupal menu)
* @param $title The title of the new page
* @param $body The content of the body of the page
*/
function oaff_generate_blank_page($title, $body) {
  $out = 
'<!DOCTYPE html>
<html>
  <head>
    <title>' . $title . '</title>' . 
    oaff_get_css_as_string() .
    oaff_get_js_as_string() . '
  </head>
  <body>
  '. $body . '
  </body>
</html>';
  print($out);
}

function oaff_report_issue() {
  $base_url = $GLOBALS['base_url'];
  $path = drupal_get_path_alias();
  $mhlinkSegs = explode("report_issue", $path);
  $mhlink = $base_url . $mhlinkSegs[1];
  $link = "https://github.com/KWARC/MathHub/issues/new?issue";
  $link .= "&body=" . urlencode("Issue at " . $mhlink);
  drupal_goto($link);
}

// -------------------------- OAFF Configuration ------------------------- \\


/**
 * MatHub configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 * @return the newly built form
 */

function oaff_mh_config_form($form, &$form_state) {
  $oaff_config = variable_get('oaff_config', '');
  $inst_name = variable_get('site_name', 'mathhub');
  $config_folder = "/meta/inf/config/" . $inst_name; 
  $config_file = $config_folder . "/config.mcf";
 
  if(!planetary_repo_stat_file($config_folder)) {
    drupal_set_message('Configuration folder "' . $config_folder . '" does not exist. 
      Please create the folder manually or rename the instance (localhost) from the system (site information) config to a pre-existing instance.', 'error');
  } else {
    $content = ""; //default
    if(planetary_repo_stat_file($config_file)) {
      $content = planetary_repo_load_file($config_file);  
    }
    $form['mathhub_file_conf'] = array(
      '#type' => 'textarea',
      '#title' => t('Configuration'),
      '#default_value' => $content,
      '#description' => t('Configuration for the current instance, See the <a href="???" >documentation</a> for more details'),
    );
  }
  $form['#validate'] = array('oaff_mh_config_validate');
  $form['#submit'] = array('oaff_mh_config_submit');

  return system_settings_form($form);
}

/**
 * validation function of MathHub configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 */
function oaff_mh_config_validate($form, &$form_state) {
  $content = $form_state['values']['mathhub_file_conf'];
  //TODO
}

/**
 * submit function of the oaff configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 */
function oaff_mh_config_submit($form, &$form_state) {
  $inst_name = variable_get('site_name', 'mathhub');
  $config_file = "/meta/inf/config/" . $inst_name . "/config.mcf";
  $content = $form_state['values']['mathhub_file_conf'];
  //saving file
  planetary_repo_save_file($config_file, $content);
  //syncing in-memory state
  oaff_crawler_sync_config_file();
}

// ######################## End OAFF Configuration ######################### \\
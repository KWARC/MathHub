<?php

/*************************************************************************
* This file is part of the MathHub.info System  (http://mathhub.info).   *
* It is hosted at https://github.com/KWARC/MathHub                       *
* Copyright (c) 2015 by the KWARC group (http://kwarc.info)              *
* Licensed under GPL3, see http://www.gnu.org/licenses/gpl.html          *
**************************************************************************/

function oaff_add_vfs_field($node_type, $formatter = 'mmt_formatter') { // TODO replace with oaff_formatter
  // Check if our field is not already created.
  if (!field_info_field('field_external')) {
    $field = array(
        'field_name' => 'field_external',
        'type' => 'vfs_file', // declared in vfs module
    );
    field_create_field($field);
  }

  // Create the instance on the bundle.
  $instance = array(
    'field_name' => 'field_external',
    'entity_type' => 'node',
    'label' => 'Content',
    'bundle' => $node_type,
    // If you don't set the "required" property then the field wont be required by default.
    'required' => true,
    'widget' => array(
      'type' => 'textfield',
    ),
    'display' => array(
      'default' => array( 
        'type' => $formatter, 
        'label' => 'hidden',
      ),
      'teaser' => array(
        'type' => $formatter,
        'label' => 'hidden',
        )
    ),    
  );
  field_create_instance($instance);
}

function oaff_create_node_types() {
  // Creating node type for OAFF documents
  $oaff_doc = (object) array(
    'type' => 'oaff_doc',
    'name' => 'MathHub Document',
    'base' => 'node_content',
    'description' => 'A node containing an flexiformal, multilingual OAFF Document',
    'has_title' => true,
  ); 
  node_type_save($oaff_doc);
  oaff_add_vfs_field('oaff_doc');
  variable_set('node_submitted_oaff_doc', false); //disable showing creation time and author
  variable_set('comment_oaff_doc', '0'); //disable comments
    
  
  // Creating node type for OAFF folders
  $oaff_virtdoc = (object) array(
    'type' => 'oaff_virtdoc',
    'name' => 'MathHub Virtual Document',
    'base' => 'node_content',
    'description' => 'A node containing an flexiformal, multilingual OAFF document, that does not have a corresponding source file',
    'has_title' => true,
  ); 
  node_type_save($oaff_virtdoc);
  oaff_add_vfs_field('oaff_virtdoc');
  variable_set('node_submitted_oaff_virtdoc', false);
  variable_set('comment_oaff_virtdoc', '0');

  //creating node type for OAFF help nodes
  $oaff_help = (object) array(
    'type' => 'oaff_helpdoc',
    'name' => 'MathHub Help Document',
    'base' => 'node_content',
    'description' => 'A help node containing documentation from the filesystem',
    'has_title' => true,
  ); 
  node_type_save($oaff_help);
  oaff_add_vfs_field('oaff_helpdoc', 'oaff_help_formatter');
  variable_set('node_submitted_oaff_helpdoc', false);
  variable_set('comment_oaff_helpdoc', '0');

}

function delete_node_type($node_type_name, $remove_type = true) {
  // deleting all node instances
  $result = db_query('SELECT nid FROM {node} n WHERE n.type = :type', array(':type' => $node_type_name));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);
  // deleting node type
  if ($remove_type) {
    node_type_delete($node_type_name);
  }
}

function oaff_install() {
  oaff_create_node_types();
  $oaff_config = array();
  $oaff_config['compiled_node_types'] = array('mmtdoc', 'glossary', 'oaff_doc', 'oaff_virtdoc');
  $oaff_config['all_node_types'] = array_merge($oaff_config['compiled_node_types'], array("oaff_helpdoc"));
  
  $oaff_config['latest_nodes'] = 0;
  $oaff_config['deleted_nodes'] = 0;
  $oaff_config['crawl_nodes_offset'] = 0;
  $oaff_config['config_file'] = '/var/data/localmh/MathHub/meta/inf/config/MathHub/config';
  $mlids = array();
  $nids = array();
  
  //root menu entries
  $libs_info = oaff_create_static_node('Libraries', 'mh/libraries', "", NULL, 1);
  $nids[] = $libs_info['nid'];
  $mlids[] = $libs_info['mlid'];
  $oaff_config['menus']['libs'] = $libs_info;

  $serv_info = oaff_create_static_node("Resources", "mh/resources", "", NULL, 1);
  $nids[] = $serv_info['nid'];
  $mlids[] = $serv_info['mlid'];
  $oaff_config['menus']['serv'] = $serv_info;

  $help_info = oaff_create_static_node("Help", "mh/help", "", NULL, 1, 15);
  $nids[] = $help_info['nid'];
  $mlids[] = $help_info['mlid'];
  $oaff_config['menus']['help'] = $help_info;


  $arch_info = oaff_create_help_node('Content', 'mh/content', 
    oaff_join_path(array("meta/inf/doc/", "index.html")), array("promote" => 1, 'show_in_menu' => true, 'plid' => $libs_info['mlid']));
  $oaff_config['libraries_nid'] = $arch_info['nid'];
  $nids[] = $arch_info['nid'];
  $mlids[] = $arch_info['mlid'];

  $contr_info = oaff_create_static_node("Misc", "mh/contribute", 
    file_get_contents(drupal_get_path('module', 'oaff') . '/contribute.xhtml'), $serv_info['mlid'], 0, 30);
  $contr_info = oaff_create_static_node("Glossary", "mh/glossary", "", $serv_info['mlid']);
  $nids[] = $contr_info['nid'];
  $mlids[] = $contr_info['mlid'];
  
  //adding source menu item (pointing to gitlab)

  $mlids[] = oaff_create_menu_link('http://gl.mathhub.info', "Sources", 10, $libs_info['mlid'], 0, array('attributes' => array('target' => '_blank')));
  $mlids[] = oaff_create_menu_link('mailto:m.iancu@jacobs-university.de?Subject=[MathHub]', "Contact a Human", 
    11, $help_info['mlid'], 0, array('attributes' => array('target' => '_blank')));

  $oaff_config['mlids'] = $mlids;
  $oaff_config['nids'] = $nids;
  $oaff_config['log'] = array(); //oaff log
  $oaff_config['archives'] = array(); //archive properties
  $oaff_config['groups'] = array(); //group properties
  $oaff_config['top_stat'] = array(
    'group' => 0,
    'archive' => 0, 
    'theory' => 0, 
    'definition' => 0, 
    'constant' => 0, 
    'view' => 0, 
    'file' => 0,
    'size' => 0,
  );

  variable_set('oaff_config', $oaff_config);

  $formats_s = variable_get("oaff_archive_formats", '');
  $node_types_s = variable_get("oaff_format_node_types", '');
  $extensions_s = variable_get("oaff_format_extensions", '');
  $logging = variable_get("oaff_logging_enabled", false);
  oaff_config_set($formats_s, $node_types_s, $extensions_s, $logging);
  $stex_filters = array(
    'local-compilation' => array(
      'status' => 1,
      'settings' => array(
        'latexml_profile' => 'stex-module',
        'latexml_preamble' => '',
      ),
      'weight' => -48,
    ),
    'mmt-compilation' => array(
      'status' => 1,
      'settings' => array('mmt_format' => 'stex',),
      'weight' => -47,
    ),
    'mmt-presentation' => array(
      'status' => 1,
      'settings' => array(
        'mmt_style' => 'planetary',
      ),
      'weight' => -46,
    ),
  );
  oaff_create_text_format('sTeX', $stex_filters, array(3));
  drupal_set_message("Installed OAFF");
}

function oaff_uninstall() {
  $oaff_config = variable_get('oaff_config');
  
  // for easy debugging, deleting content on reinstall
  delete_node_type('oaff_doc'); 
  delete_node_type('oaff_virtdoc'); 
  delete_node_type('oaff_helpdoc'); 
   
  delete_node_type('mmtdoc', false);
 
  //deleting menu children also, otherwise they are orphaned
  $tree = menu_build_tree('main-menu', array('expanded' => $oaff_config['mlids']));
  $mlids = array_unique(array_merge($oaff_config['mlids'], oaff_mlids_gather($tree)));

  foreach ($mlids as $mlid) {
    //menu_link_delete($mlid);
    // the API function above doesn't actually delete system links from hook menu
    // Therefore I must do it manually :(
    db_delete("menu_links")->condition('mlid', $mlid)->execute();
  }

  $nids = $oaff_config['nids'];
  foreach ($nids as $nid) {
    node_delete($nid);
  }
  oaff_delete_text_format('sTeX');
  drupal_set_message("Uninstalled OAFF");
}

function oaff_mlids_gather($tree) {
  $mlids = array();
  foreach ($tree as $item) {
    if (isset($item['link'])) {
      $mlids[] = $item['link']['mlid'];
    }
    if (isset($item['below'])) {
      $nmlids = oaff_mlids_gather($item['below']);
      $mlids = array_merge($mlids, $nmlids);
    }
  }
  return $mlids;
}

/** declares tables for OAFF-specific content */ 
function oaff_schema() {
  $schema = array();
  $schema['oaff_errors'] = array(
    'description' => 'the base table for oaff nodes ',
    'fields' => array(
	    'eid' => array(
	      'description' => 'The primary identifier of a node with error',
        'type' => 'serial', 
        'unsigned' => true,
        'not null' => true,
      ),
      'nid' => array(
	      'description' => 'The id of the node that has the error',
        'type' => 'int', 
        'unsigned' => true,
        'not null' => true,
      ),
      'type' => array(
        'description' => 'The Error type, 0 for info, 1 for warning, 2 for error, 3 for fatal',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'compiler' => array(
        'description' => 'The compiler that generated the error',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'mh_group' => array(
        'description' => 'The group where the node with the error belongs',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'mh_archive' => array(
        'description' => 'The archive where the node with the error belongs',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'short_msg' => array(
        'description' => 'The short error message',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => true,
      ),
      'long_msg' => array(
        'description' => 'The long error message or (part of) stack trace',
        'type' => 'varchar',
        'length' => 2047,
        'not null' => true,
      ),
      'srcref' => array(
        'description' => 'The source ref, of format <from line>.<from col>-<to line>.<to col>',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
    ),
    'primary key' => array('eid'),	
  );

  $schema['oaff_node_parents'] = array(
    'description' => 'the base table for representing relations between oaff nodes ',
    'fields' => array(
    'rid' => array(
      'description' => 'The primary identifier of a parent relation',
        'type' => 'serial', 
        'unsigned' => true,
        'not null' => true,
      ),
    'cid' => array(
      'description' => 'The id of the (child) node',
        'type' => 'int', 
        'unsigned' => true,
        'not null' => true,
      ),
    'pid' => array(
        'description' => 'The id of the parent',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    ),
    'primary key' => array('rid'),  
  );

  $schema['oaff_node_lang_groups'] = array(
    'description' => 'the base table for representing relations between oaff nodes ',
    'fields' => array(
    'gid' => array(
      'description' => 'The primary identifier of a language group relation',
        'type' => 'serial', 
        'unsigned' => true,
        'not null' => true,
      ),
    'bid' => array(
      'description' => 'The id of base node',
        'type' => 'int', 
        'unsigned' => true,
        'not null' => true,
      ),
    'lid' => array(
        'description' => 'The id of the language variant',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    'location' => array(
        'description' => 'The file path',
        'type' => 'varchar',
        'length' => 511,
        'not null' => true,
      ),
    ),
    'primary key' => array('gid'),  
  );
  $schema['oaff_node_mtime'] = array(
    'description' => ' last modified time of a logfile for a compiler as known to the mathhub system',
    'fields' => array(
    'mid' => array(
      'description' => 'The primary identifier of a language group relation',
        'type' => 'serial', 
        'unsigned' => true,
        'not null' => true,
      ),
    'nid' => array(
      'description' => 'The node id',
        'type' => 'int', 
        'unsigned' => true,
        'not null' => true,
      ),
    'logfile' => array(
        'description' => 'The logfile that has this mtime',
        'type' => 'varchar',
        'length' => 511,
        'not null' => true,
      ),
    'compiler' => array(
        'description' => 'The compiler that generated the logfile',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
    'mtime' => array(
        'description' => 'The modification time',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    ),
    'primary key' => array('mid'),  
  );
  $schema['oaff_archive_stat'] = array(
    'description' => 'the statistics of archive ',
    'fields' => array(
      'aid' => array(
        'description' => 'The primary identifier of an archive',
        'type' => 'serial', 
        'unsigned' => true,
        'not null' => true,
      ),
      'mh_archive' => array(
        'description' => 'The archive name',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'mh_group' => array(
        'description' => 'The group where the archive belongs',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'view' => array(
        'description' => 'The number of views in the archive',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'theory' => array(
        'description' => 'The number of theories in the archive',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'definition' => array(
        'description' => 'The number of definitions in the archive',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'constant' => array(
        'description' => 'The number of constatns in the archive',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'file' => array(
        'description' => 'The number of files in the archive',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'omdoc' => array(
        'description' => 'OMDoc size',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'source' => array(
        'description' => 'The source size',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
    ),
    'primary key' => array('aid'),  
  );
  $schema['oaff_group_stat'] = array(
    'description' => 'the statistics of the group ',
    'fields' => array(
      'gid' => array(
        'description' => 'The primary identifier of a group',
        'type' => 'serial', 
        'unsigned' => true,
        'not null' => true,
      ),
      'mh_group' => array(
        'description' => 'The group name',
        'type' => 'varchar',
        'length' => 63,
        'not null' => true,
      ),
      'archive' => array(
        'description' => 'The number of archives in the group',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'view' => array(
        'description' => 'The number of views in the group',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'theory' => array(
        'description' => 'The number of theories in the group',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'definition' => array(
        'description' => 'The number of definitions in the group',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'constant' => array(
        'description' => 'The number of constatns in the group',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'file' => array(
        'description' => 'The number of files in the group',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
      'size' => array(
        'description' => 'int',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
      ),
    ),
    'primary key' => array('gid'),  
  );
  return $schema;
}

/**
* Create text format 
* @param $format_name The name of text format to create
* @param $filters Filters to activate for this format, array(filter name => params)
*   params -- associative array
*     status => integer -- 0 - inactive, 1 - active
*     weigth => integer -- (optional) 
*     settings => array -- params depending on filter
* @param $roles Array of rids of user roles who will have access to this format
*/
function oaff_create_text_format($format_name, $filters, $roles) {
  $format_format = str_replace(' ', '_', strtolower($format_name));
  $format = array(
    'format' => $format_format,
    'name' => $format_name,
    'filters' => $filters,
  );
  $format = (object) $format;
  // save format
  filter_format_save($format);
  
  // give permission to allowed users
  // use direct access to database due to 
  // absence of drupal built in function
  foreach ($roles as $key => $role) {
    db_merge('role_permission')
    ->key(array(
      'rid' => $role,
      'permission' => 'use text format ' . $format_format,
    ))
    ->fields(array(
      'module' => 'filter',
    ))
    ->execute();
  }
  

  drupal_set_message(t('A <a href="@php-code">' 
    . $format->name . '</a> text format has been created.', 
    array('@php-code' => url('admin/config/content/formats/' . $format->format))));
}

/**
* Delete text format
* @param $format_name Text format name to delete
*/
function oaff_delete_text_format($format_name) {
  $format_format = str_replace(' ', '_', strtolower($format_name));
  
  // use direct access to database due to 
  // absence of drupal built in functions

  // delete filters activated for this format
  db_delete('filter')
    ->condition('format', $format_format)
    ->execute();

  // delete format
  db_delete('filter_format')
    ->condition('format', $format_format)
    ->execute();

  //delete user permissions
  db_delete('role_permission')
    ->condition('permission', 'use text format ' . $format_format)
    ->execute();

  drupal_set_message(t('A ' . $format_name . ' text format has been deleted.'));
}
<?php
//########################## API FUNCTIONS ##############################\\

/**
 * Initialize MMT, loads css and js files and uses jobad API
 */
function mmt_initialize() {
  /**
     * CSS
     */
    $mmtPath = drupal_get_path('module', 'mmt');
    $mmt_config = variable_get('mmt_config');
    $mmtUrl = $mmt_config['mmturl'];  

    libraries_load("jobad");
 
    drupal_add_css($mmtPath . '/css/mmt.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
    
    /**
     * JavaScript
     */
    drupal_add_js('var mmtUrl = "' . $mmtUrl . '";', 'inline');
    jobad_add_module($mmtPath . '/jobad/planetary-navigation.js', "kwarc.mmt.planetary.navigation");
    jobad_add_module($mmtPath . '/jobad/hovering.js', "kwarc.mmt.hovering");
    jobad_add_module($mmtPath . '/jobad/interactive-viewing.js', "kwarc.mmt.intvw");

    //if search enabled
    //jobad_add_module($mmtPath . '/jobad/search.js', "kwarc.mmt.search");

    //mmt js libs
    drupal_add_js($mmtPath . '/utils/mmt-html.js', 'file', array('cache' => false));
    drupal_add_js($mmtPath . '/utils/mathml.js', 'file', array('cache' => false));
    //modules
    $instName = jobad_initialize();
    return $instName;
}


function mmt_get_contentPres($path, $style = 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5') {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:planetary/getContentPres';
  $data = array('path' => $path, 'style' => $style);
  $options = array(
    'http' => array(
        'header'  => "Content-type: application/json\r\n",
        'method'  => 'POST',
        'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $result = file_get_contents($url, false, $context);
  return $result;
}

function mmt_get_presentation($dpath, $body, $style = 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5') {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:planetary/getPresentation';
  $data = array('body' => $body, 'style' => $style);
  if (isset($dpath)) {
    $data['dpath'] = $dpath;
  }

  $options = array(
    'http' => array(
        'header'  => "Content-type: application/json\r\n",
        'method'  => 'POST',
        'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $result = json_decode($response, true);
  return $response;
}


function mmt_get_compiled($body, $dpath, $format) {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:planetary/getCompiled';

  $data = array('body' => $body, 'format' => $format);
  if (isset($dpath)) {
    $data['dpath'] = $dpath;
  }

  $options = array(
    'http' => array(
      'header'  => "Content-type: application/json\r\n",
      'method'  => 'POST',        
      'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $result = json_decode($response, true); 
  return $response;
}

function mmt_get_content($path) {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $postPath = '???'; //default-for documents
  if (substr_count($path, '?') == 1) { //mmt module
    $postPath = '??';
  }
  $url = $mmtUrl . '/:mmt?' . $path . $postPath. '_present_' . 'xml';
  $content = file_get_contents($url);
  return $content;
}

/** gets a list of the mmt paths of all mmt theories that are included in the given one
 * i.e. all theories this one depends on 
 * e.g.  
  mmt_get_dependencies("http://docs.omdoc.org/smglo/dgraph.en.omdoc?dgraph.en");
  mmt_get_dependencies("http://docs.omdoc.org/smglo/dgraph.omdoc?dgraph");
*/
function mmt_get_dependencies($mpath) {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:query';
  $data = '<related><individual uri="'.$mpath.'"/><toobject relation="Includes"/></related>';

  $options = array(
    'http' => array(
        'header'  => "Content-type: application/xml\r\n",
        'method'  => 'POST',
        'content' => $data,
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $xml = new SimpleXMLElement($response);
  $xmlpaths = $xml->xpath('/results/result/uri');
  $results = array();
  foreach ($xmlpaths as $xmlpath){
    $results[] = (string)$xmlpath['path'];
  }
  return array($results); 
}

########################## END API FUNCTIONS ##############################


//############################# MAIN HOOKS ###############################\\
/**
 * Implementing hook_menu()
 */
function mmt_menu() {

  $items['mmt/comp/%/log'] = array(
    'title' => 'MMT->OMDoc log',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_filter_compilation_log', 2),
    'access arguments' => array('administer blocks'),
  );
  $items['mmt/pres/%/log'] = array(
    'title' => 'MMT->OMDoc presentation',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_filter_compilation_log', 2),
    'access arguments' => array('administer blocks'),
  );
  $items['mmt/comp'] = array(
    'title' => 'MMT->OMDoc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_parent'),
    'access arguments' => array('administer blocks'),
  );
  $items['mmt/pres'] = array(
    'title' => 'MMT->OMDoc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_parent'),
    'access arguments' => array('administer blocks'),
  );
  $items['admin/config/content/mmt'] = array(
    'title' => 'MMT configuration',
    'description' => 'Configure MMT Integration. ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

//--------------------------- MMT Configuration --------------------------\\

function mmt_config_validate($form, &$form_state) {
  $mmturl = $form_state['values']['mmt_instance_url'];
  if (trim($mmturl) == '') {
    form_set_error('mmt_instance_url', t('MMT URL cannot be empty'));
  }
}

function mmt_config_submit($form, &$form_state) {
  $mmturl = $form_state['values']['mmt_instance_url'];
  mmt_config_set($mmturl);
}

function mmt_config_set($mmturl) {
  $mmt_config = variable_get('mmt_config');
  $mmt_config['mmturl'] = $mmturl;

  variable_set("mmt_config", $mmt_config);
}

function mmt_config_form($form, &$form_state) {
  $form['mmt_instance_url'] = array(
    '#type' => 'textfield',
    '#title' => t('MMT URL'),
    '#default_value' => variable_get('mmt_instance_url', 'http://localhost:8080'),
    '#description' => t('The URL of the MMT instance to be connected with OAFF'),
  );

  $form['#validate'] = array('mmt_config_validate');
  $form['#submit'] = array('mmt_config_submit');

  return system_settings_form($form);
}
#-------------------------- End MMT Configuration -------------------------#



//------------------------- Menu callback functions ---------------------\\
function mmt_parent($form, $form_state) {
  return $form;
}

#------------------------ End Menu callback functions ---------------------#


// -------------------------------- MMT Filters ------------------------------------ \\
/*
 * filter hooks for handling content formats
 */
function mmt_filter_info() {
  $filters = array();
  $filters['mmt-presentation'] = array(
    'title' => t('MMT Presentation filter'),
    'description' => t('The text will be rendered by MMT using a presentation style'),
    'process callback' => 'mmt_filter_presentation_process',
    'default settings' => array(
      'mmt_style' => 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5',
    ),
    'settings callback' => 'mmt_filter_presentation_settings',
 //   'tips callback' => '_mmt_filter_presentation_tips',
  );
  $filters['mmt-compilation'] = array(
    'title' => t('MMT Compilation filter'),
    'description' => t('The text will be compiled by MMT to return MMT-OMDoc'),
    'process callback' => 'mmt_filter_compilation_process',
    'default settings' => array(
      'mmt_format' => 'mmt',
    ),
    'settings callback' => 'mmt_filter_compilation_settings',
 //   'tips callback' => '_mmt_filter_presentation_tips',
  );

  return $filters;
}

function mmt_filter_presentation_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_context;
  global $filter_debug;
  
  if (isset($filter_context['failed']) && $filter_context['failed'] == "true") { //failed already
    return $text;
  }

  if (!isset($filter_context['source'])) { //this is the first filter
    $filter_context['source'] = $text;
  }
  
  $dpath = $filter_context['mmt']['dpath'];
  $style = $filter->settings['mmt_style'];
  $response = mmt_get_presentation($dpath, $text, $style);
  
  $key = md5($text);
  _drutexml_cache_set($key, $response);	
  if (isset($filter_debug)) {
	  $filter_debug["mmt_presentation"] = array("mmt/pres", array($key));
  }

  if ($response == "") {
    drupal_set_message('Cannot connect to MMT instance, is MMT running?', 'error');
    $filter_context['failed'] = true;    
    return $text;
  }

  $result= json_decode($response, true);
  $filter_context['status']['mmt_pres'] = $result['status'];
  if ($result['status']['conversion'] != 0) { //compilation succeeded
    $filter_context['failed'] = true;
  }
  return $result['content'];
}

function mmt_filter_compilation_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_debug;
  global $filter_context;

  if (isset($filter_context['failed']) && $filter_context['failed'] == "true") { //failed already
    return $text;
  }

  if (!isset($filter_context['source'])) { //this is the first filter
    $filter_context['source'] = $text;
  }

  $dpath = $filter_context['mmt']['dpath'];
  $format = $filter->settings['mmt_format'];
  $response = mmt_get_compiled($text, $dpath, $format);

  $key = md5($text);
  _drutexml_cache_set($key, utf8_encode($response));	
 
  if (isset($filter_debug)) {
	  $filter_debug["mmt_compilation"] = array("mmt/comp", array($key));
  }

  if ($response == "") {
    drupal_set_message('Cannot connect to MMT instance, is MMT running?', 'error');
    $filter_context['failed'] = true;    
    return $text;
  }
  $result= json_decode($response, true);
  $filter_context['status']['mmt_comp'] = $result['status'];
  if ($result['status']['conversion'] != 0) {
    $filter_context['failed'] = true;
  }
  return $result['content'];
}


function mmt_filter_compilation_log($form, $form_state, $key) {
  exit();
  $val = _drutexml_cache_read($key);
  $form["log"] =
		array(
		      "#markup" => "<pre>".htmlentities($val)."</pre>",
		      );
	return $form;
}

function mmt_filter_presentation_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['mmt_style'] = array(
    '#type' => 'textfield',
    '#title' => t('MMT Presentation Style'),
    '#default_value' => isset($filter->settings['mmt_style']) ? $filter->settings['mmt_style'] : $defaults['mmt_style'],
    '#description' => t('The URI or name of the style used by MMT to generate presentation for MMT/OMDoc documents'),
  );
  return $settings;
}

function mmt_filter_compilation_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['mmt_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Input Format for MMT to compile'),
    '#default_value' => isset($filter->settings['mmt_format']) ? $filter->settings['mmt_format'] : $defaults['mmt_format'],
    '#description' => t('The format of the text sent to MMT to be compiled into MMT/OMDoc'),
  );
  return $settings;
}
# -------------------------------- End MMT Filters ------------------------------------ #



# ------------------------------ Other Hooks --------------------------------- #
/**
 * implements hook_form_alter, adds URI field to mmt-specific forms
 */
function mmt_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'mmtdoc_node_form') { 
    if(array_key_exists('nid', $form_state['node'])) { //editing existing node
       $location = $form_state['node']->field_external['und']['0']['path']; 
       $path_info = oaff_get_path_info($location);
       global $filter_context;
       $filter_context = array();
       $filter_context['mmt'] = $path_info;

    }
  }
}
# ----------------------------- End Other Hookds ------------------------------ #

//------------------------------ MMT Formatter ---------------------------------\\
function mmt_field_formatter_info() {
   return array(
   // This formatter changes the background color of the content region.
    'mmt_formatter' => array(
      'label' => t('Formatter of MMT content'),
      'field types' => array('vfs_file'),
    ),
  );
}

function mmt_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
    case 'mmt_formatter':
      $lang = $entity->language;
      foreach ($items as $delta => $item) {
        $location = $item['path'];

        $path_info = oaff_get_path_info($location);

        global $filter_context;
        $filter_context = array();
        $filter_context['mmt']['dpath'] = $path_info['dpath'];
        $content = planetary_repo_load_file($location);
        global $filter_debug;
        $filter_debug = array();
        $markup = check_markup($content, $item['filter'], $lang);
        $element[$delta] = array(
          "#type" => "container",
          '#attributes' => array(
               'class' => array('contextual-links-region'),
               ),
          "context_links" =>
          array(
          "#type" => "contextual_links",
          "#contextual_links" => $filter_debug
          ),
          "content" =>
          array(
          '#markup' => $markup,
          )
          );
      }
      break;
    }
  return $element;
}

# ------------------------------- End MMT Formatter ------------------------------- #
################################## END MAIN HOOKS ##################################
                                                 
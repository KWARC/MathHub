<?php
//########################## API FUNCTIONS ##############################\\

/**
 * Initialize MMT, loads css and js files and uses jobad API
 */
function mmt_initialize() {
  /**
     * CSS
     */
    $mmtPath = drupal_get_path('module', 'mmt');
    $mmt_config = variable_get('mmt_config');
    $mmtUrl = $mmt_config['mmturl'];  

    libraries_load("jobad");
 
    drupal_add_css($mmtPath . '/css/mmt.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
    
    /**
     * JavaScript
     */
    drupal_add_js('var mmtUrl = "' . $mmtUrl . '";', 'inline');
    jobad_add_module($mmtPath . '/jobad/planetary-navigation.js', "kwarc.mmt.planetary.navigation");
    jobad_add_module($mmtPath . '/jobad/hovering.js', "kwarc.mmt.hovering");
    jobad_add_module($mmtPath . '/jobad/interactive-viewing.js', "kwarc.mmt.intvw");

    //if search enabled
   // jobad_add_module($mmtPath . '/jobad/search.js', "kwarc.mmt.search");

    //mmt js libs
    drupal_add_js($mmtPath . '/utils/mmt-html.js', 'file', array('cache' => false));
    drupal_add_js($mmtPath . '/utils/mathml.js', 'file', array('cache' => false));
    //modules
    $instName = jobad_initialize();
    return $instName;
}

/** api for MMT/VFS paths and locations */
function mmt_get_location($dpath)  {
  $mmt_config = variable_get('mmt_config');
  $docbases = $mmt_config['docbases'];
  foreach ($docbases as $archive => $base) {
    if (strpos($dpath, $base) === 0) {
      $fragment = substr($dpath, strlen($base) + 1); //+1 removes the connecting slash as in 'base/fragment'
      return $archive . '/source/' . $fragment;
    }
  }
}

function mmt_get_path_info($location) {
  $mmt_config = variable_get('mmt_config');
  $docbases = $mmt_config['docbases'];

  $lparts = explode('/', $location); //format is <archive-name>/source/<fragment path>
  $archive = $lparts[0];

  $filename = $lparts[count($lparts) - 1];
  $folderSegs = array_slice($lparts, 0, -1);
  $parent = join("/", $folderSegs);
  
  $fparts = explode('.', $filename);
  $extension = $fparts[count($fparts) - 1];
  
  $lang = 'und'; //default
  if (count($fparts) == 3) { //three file parts means <module>.<lang>.<ext>
    $lang = $fparts[1]; 
  }

  $modName = $fparts[0];

  //getting dpath  
  $relPathSegments = array_slice($lparts, 2);
  $relPath = "";//default for toplevel
  if (count($relPathSegments) != 0) {
    $relPath = join('/', $relPathSegments);
  }

  $rparts = explode('.', $relPath);

  if (count($rparts) > 1) { //there is an extension
    $rparts[count($rparts) - 1] = "omdoc"; 
  }
  $omdocRelPath = join(".", $rparts); 

  $dpath = $docbases[$archive] . '/' . $omdocRelPath;

  $path_info = array(
    'location' => $location,
    'archive' => $archive,
    'filename' => $filename,
    'extension' => $extension,
    'module' => $modName,
    'parent' => $parent, //parent folder
    'lang' => $lang,
    'dpath' => $dpath,
    );
  return $path_info;
}

function mmt_get_contentPres($path, $style = 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5') {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:planetary/getContentPres';
  $data = array('path' => $path, 'style' => $style);
  $options = array(
    'http' => array(
        'header'  => "Content-type: application/json\r\n",
        'method'  => 'POST',
        'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $result = file_get_contents($url, false, $context);
  return $result;
}

function mmt_get_presentation($dpath, $body, $style = 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5') {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:planetary/getPresentation';
  $data = array('body' => $body, 'style' => $style);
  if (isset($dpath)) {
    $data['dpath'] = $dpath;
  }

  $options = array(
    'http' => array(
        'header'  => "Content-type: application/json\r\n",
        'method'  => 'POST',
        'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $result = json_decode($response, true);
  return $response;
}


function mmt_get_compiled($body, $dpath, $format) {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:planetary/getCompiled';

  $data = array('body' => $body, 'format' => $format);
  if (isset($dpath)) {
    $data['dpath'] = $dpath;
  }

  $options = array(
    'http' => array(
      'header'  => "Content-type: application/json\r\n",
      'method'  => 'POST',        
      'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $result = json_decode($response, true); 
  return $response;
}

function mmt_get_content($path) {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $postPath = '???'; //default-for documents
  if (substr_count($path, '?') == 1) { //mmt module
    $postPath = '??';
  }
  $url = $mmtUrl . '/:mmt?' . $path . $postPath. '_present_' . 'xml';
  $content = file_get_contents($url);
  return $content;
}

/** gets a list of the mmt paths of all mmt theories that are included in the given one
 * i.e. all theories this one depends on 
 * e.g.  
  mmt_get_dependencies("http://docs.omdoc.org/smglo/dgraph.en.omdoc?dgraph.en");
  mmt_get_dependencies("http://docs.omdoc.org/smglo/dgraph.omdoc?dgraph");
*/
function mmt_get_dependencies($mpath) {
  $mmt_config = variable_get('mmt_config');
  $mmtUrl = $mmt_config['mmturl'];
  $url = $mmtUrl . '/:query';
  $data = '<related><individual uri="'.$mpath.'"/><toobject relation="Includes"/></related>';

  $options = array(
    'http' => array(
        'header'  => "Content-type: application/xml\r\n",
        'method'  => 'POST',
        'content' => $data,
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $xml = new SimpleXMLElement($response);
  $xmlpaths = $xml->xpath('/results/result/uri');
  $results = array();
  foreach ($xmlpaths as $xmlpath){
    $results[] = (string)$xmlpath['path'];
  }
  return array($results); 
}

function mmt_save_path($nid, $path) {
  if (substr($path, -1) == '/') {
    $path = substr($path, 0, -1);
  }
  
  $pathOpt = array(
    'source' => 'node/' . $nid,
    'alias' => $path,
  );
  path_save($pathOpt);
}

########################## END API FUNCTIONS ##############################


//############################# MAIN HOOKS ###############################\\
/**
 * Implementing hook_menu()
 */
function mmt_menu() {
  $items['mmt/autoload'] = array(
    'title' => "MMT AutoLoad",
    'page callback' => 'mmt_create_nodes',
    'access callback' => 'mmt_setup_access',
    'menu_name' => 'navigation'
    );
  $items['mmt/archives'] = array(
    'title' => "Archive Callback",
    'page callback' => 'mmt_archives',
    'access callback' => true,
    'menu_name' => 'main-menu',
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
  $items['mmt/comp/%/log'] = array(
    'title' => 'MMT->OMDoc log',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_filter_compilation_log', 2),
    'access arguments' => array('administer blocks'),
  );
  $items['mmt/pres/%/log'] = array(
    'title' => 'MMT->OMDoc presentation',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_filter_compilation_log', 2),
    'access arguments' => array('administer blocks'),
  );
  $items['mmt/comp'] = array(
    'title' => 'MMT->OMDoc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_parent'),
    'access arguments' => array('administer blocks'),
  );
  $items['mmt/pres'] = array(
    'title' => 'MMT->OMDoc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_parent'),
    'access arguments' => array('administer blocks'),
  );
  $items['admin/config/content/mmt'] = array(
    'title' => 'MMT configuration',
    'description' => 'Configure MMT Integration. ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

//------------------------- Menu callback functions ---------------------\\
function mmt_parent($form, $form_state) {
  return $form;
}

function mmt_setup_access() {
  global $user;
  if ($user-> uid == 1) {//only admin has rights 
    return true;
  } else {
  return false;
  }
}

function mmt_archives() {
  //TODO change generation mode for this page
  $htmlText = '
  The archives page contains a collection of flexiformal mathematical repositories that are made available in the OAFF. 
  Currently, this includes the following: 
    <ul>
     <li> <a href="?q=/http%3A//docs.omdoc.org/urtheories">urtheories</a> - formal foundations</li>
     <li> <a href="?q=/http%3A//docs.omdoc.org/latin">LATIN</a> - logic atlas</li>
     <li> <a href="?q=/http%3A//www.openmath.org">OpenMath</a> - a content dictionary with Scala-based computational semantics </li>
     <li> <a href="?q=/http%3A//docs.omdoc.org/smglo">SMGlo</a> - a semantic glossary of mathematics (in progress) </li>
     <li> <a href="?q=/http%3A//docs.omdoc.org/complog">Complog</a> - Computational Logic notes </li>
    </ul>
  ';
  return $htmlText;
}
#------------------------ End Menu callback functions ---------------------#

//--------------------------- MMT Configuration --------------------------\\

function mmt_config_validate($form, &$form_state) {
  $mmturl = $form_state['values']['mmt_instance_url'];
  if (trim($mmturl) == '') {
    form_set_error('mmt_instance_url', t('MMT URL cannot be empty'));
  }

  $formats_S = $form_state['values']['mmt_archive_formats'];
  $formats_lines = explode("\n", $formats_S);
  foreach ($formats_lines as $line) {
    $pair = explode(' ', $line);
    if (count($pair) != 2) {
      form_set_error('mmt_archive_formats', t('Invalid line "' . $line .  '", must be space-separated pair of archive and text format'));
    }
  }

  $node_types_S = $form_state['values']['mmt_format_node_types'];
  $node_types_lines = explode("\n", $node_types_S);
  foreach ($node_types_lines as $line) {
    $pair = explode(' ', $line);
    if (count($pair) != 2) {
      form_set_error('mmt_format_node_types', t('Invalid line "' . $line .  '", must be space-separated pair of text format and nodetype'));
    }
  }
  
  $extensions_S = $form_state['values']['mmt_format_extensions'];
  $extensions_lines = explode("\n", $extensions_S);
  foreach ($extensions_lines as $line) {
    $pair = explode(' ', $line);
    if (count($pair) != 2) {
      form_set_error('mmt_format_extensions', t('Invalid line "' . $line .  '", must be space-separated pair of format and extension'));
    }
  }
}

function mmt_config_submit($form, &$form_state) {
  $formats_S = $form_state['values']['mmt_archive_formats'];
  $node_types_S = $form_state['values']['mmt_format_node_types'];
  $extensions_S = $form_state['values']['mmt_format_extensions'];
  $mmturl = $form_state['values']['mmt_instance_url'];

  mmt_config_set($mmturl, $formats_S, $node_types_S, $extensions_S);
}

function mmt_config_set($mmturl, $formats_S, $node_types_S, $extensions_S) {

  $formats_lines = explode("\n", $formats_S);
  $formats = array();
  foreach ($formats_lines as $line) {
    if (trim($line) != '') {
      $pair = explode(' ', $line);
      $formats[trim($pair[0])] = trim($pair[1]);
    }
  }

  $node_types_lines = explode("\n", $node_types_S);
  $node_types = array();
  foreach ($node_types_lines as $line) {
    if (trim($line) != '') {
      $pair = explode(' ', $line);
      $node_types[trim($pair[0])] = trim($pair[1]);
    }
  }

  $extensions_lines = explode("\n", $extensions_S);
  $extensions = array();
  foreach ($extensions_lines as $line) {
    if (trim($line) != '') {   
      $pair = explode(' ', $line);
      $extensions[trim($pair[0])] = trim($pair[1]);
    }
  }
  
  $mmt_config = array();
  $mmt_config['formats'] = $formats;
  $mmt_config['node_types'] = $node_types;
  $mmt_config['extensions'] = $extensions;
  $mmt_config['mmturl'] = $mmturl;

  variable_set("mmt_config", $mmt_config);
}

function mmt_config_form($form, &$form_state) {
  $form['mmt_instance_url'] = array(
    '#type' => 'textfield',
    '#title' => t('MMT URL'),
    '#default_value' => variable_get('mmt_instance_url', 'http://localhost:8080'),
    '#description' => t('The URL of the MMT instance to be connected with OAFF'),
  );

  $form['mmt_archive_formats'] = array(
    '#type' => 'textarea',
    '#title' => t('The Text Format associated with each archive'),
    '#default_value' => variable_get('mmt_archive_formats', ''),
    '#description' => t(' Archive name and its associated text format separated by space. One such pair per line'),
  );

  $form['mmt_format_node_types'] = array(
    '#type' => 'textarea',
    '#title' => t('The content type associated with each text format'),
    '#default_value' => variable_get('mmt_format_node_types', ''),
    '#description' => t('Text format and its associated node type separated by space. One such pair per line'),
  );

  $form['mmt_format_extensions'] = array(
    '#type' => 'textarea',
    '#title' => t('The extension associated with each format'),
    '#default_value' => variable_get('mmt_format_extensions', ''),
    '#description' => t('Text format and its associated extension separated by space. One such pair per line'),
  );

  $form['#validate'] = array('mmt_config_validate');
  $form['#submit'] = array('mmt_config_submit');

  return system_settings_form($form);
}
#-------------------------- End MMT Configuration -------------------------#


// -------------------------------- MMT Filters ------------------------------------ \\
/*
 * filter hooks for handling content formats
 */
function mmt_filter_info() {
  $filters = array();
  $filters['mmt-presentation'] = array(
    'title' => t('MMT Presentation filter'),
    'description' => t('The text will be rendered by MMT using a presentation style'),
    'process callback' => 'mmt_filter_presentation_process',
    'default settings' => array(
      'mmt_style' => 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5',
    ),
    'settings callback' => 'mmt_filter_presentation_settings',
 //   'tips callback' => '_mmt_filter_presentation_tips',
  );
  $filters['mmt-compilation'] = array(
    'title' => t('MMT Compilation filter'),
    'description' => t('The text will be compiled by MMT to return MMT-OMDoc'),
    'process callback' => 'mmt_filter_compilation_process',
    'default settings' => array(
      'mmt_format' => 'mmt',
    ),
    'settings callback' => 'mmt_filter_compilation_settings',
 //   'tips callback' => '_mmt_filter_presentation_tips',
  );

  return $filters;
}

function mmt_filter_presentation_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_context;
  global $filter_debug;
  
  if (isset($filter_context['failed']) && $filter_context['failed'] == "true") { //failed already
    return $text;
  }
  
  $dpath = $filter_context['mmt']['dpath'];
  $style = $filter->settings['mmt_style'];
  $response = mmt_get_presentation($dpath, $text, $style);
  
  $key = md5($text);
  _drutexml_cache_set($key, $response);	
  if (isset($filter_debug)) {
	  $filter_debug["mmt_presentation"] = array("mmt/pres", array($key));
  }

  if ($response == "") {
    drupal_set_message('Cannot connect to MMT instance, is MMT running?', 'error');
    $filter_context['failed'] = true;    
    return _mmt_produce_preformatted($text);
  }

  $result= json_decode($response, true);
  if ($result['success'] == "true") { //compilation succeeded
    return $result['content'];
  } else {
    $filter_context['failed'] = true;
    drupal_set_message("MMT Compilation failed, log follows :", "error");
    $response = "<p> <bf> Source: </bf> </p>" . _mmt_produce_preformatted($filter_context['source'])  . "<p> <bf> Log: </bf> </p>" . _mmt_produce_preformatted($result['log']);
    return $response;
  }
}

function mmt_filter_compilation_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_debug;
  global $filter_context;

  if (isset($filter_context['failed']) && $filter_context['failed'] == "true") { //failed already
    return $text;
  }

  $dpath = $filter_context['mmt']['dpath'];
  $format = $filter->settings['mmt_format'];
  $response = mmt_get_compiled($text, $dpath, $format);

  $key = md5($text);
  _drutexml_cache_set($key, utf8_encode($response));	
 
  if (isset($filter_debug)) {
	  $filter_debug["mmt_compilation"] = array("mmt/comp", array($key));
  }

  if ($response == "") {
    drupal_set_message('Cannot connect to MMT instance, is MMT running?', 'error');
    $filter_context['failed'] = true;    
    return _mmt_produce_preformatted($filter_context['source']);
  }

  $result= json_decode($response, true);
  if ($result['success'] == "true") { //compilation succeeded
    return $result['content'];
  } else {
    $filter_context['failed'] = true;
    drupal_set_message("MMT Compilation failed, log follows :", "error");
    
    $errors = $result['errors'];
    $sanitizedSource = _mmt_produce_preformatted($filter_context['source']);

    $errMarkedSource = _mmt_mark_source_errors($sanitizedSource, $errors);

    $response = "<p> <bf> Source: </bf> </p>" . $errMarkedSource  . "<p> <bf> Log: </bf> </p>" . _mmt_produce_preformatted($result['log']);
    return  $response;
  }
}

function _mmt_mark_source_errors($source, $errors) {
  for ($i = 0; $i < count($errors); $i++) {
    $error = $errors[$i];
    $message = $error['message'];
    if (isset($error['message'])) {
      $region = $error['region'];
      $tfArr = explode("-",$region);
      $fArr = explode(".", $tfArr[0]);
      $fromLine = $fArr[0];
      $fromColumn = $fArr[1];
      $tArr = explode(".", $tfArr[1]);
      $toLine = $tArr[0];
      $toColumn = $tArr[1];
      $lines = explode("\n", $source);
      $lines[$fromLine - 1] = '<span style="background:#FF8888" title="Error: ' . $message .'">' . $lines[$fromLine - 1];
      $lines[$toLine - 1] = $lines[$toLine - 1] . '</span>';
      $source = join("\n", $lines);
    }

    return $source;
  }


}


function _mmt_produce_preformatted($text) {
  return "<pre>" . check_plain($text) . "</pre>";
}



function mmt_filter_compilation_log($form, $form_state, $key) {
  exit();
  $val = _drutexml_cache_read($key);
  $form["log"] =
		array(
		      "#markup" => "<pre>".htmlentities($val)."</pre>",
		      );
	return $form;
}

function mmt_filter_presentation_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['mmt_style'] = array(
    '#type' => 'textfield',
    '#title' => t('MMT Presentation Style'),
    '#default_value' => isset($filter->settings['mmt_style']) ? $filter->settings['mmt_style'] : $defaults['mmt_style'],
    '#description' => t('The URI or name of the style used by MMT to generate presentation for MMT/OMDoc documents'),
  );
  return $settings;
}

function mmt_filter_compilation_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['mmt_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Input Format for MMT to compile'),
    '#default_value' => isset($filter->settings['mmt_format']) ? $filter->settings['mmt_format'] : $defaults['mmt_format'],
    '#description' => t('The format of the text sent to MMT to be compiled into MMT/OMDoc'),
  );
  return $settings;
}
# -------------------------------- End MMT Filters ------------------------------------ #


//-------------------------------- MMT Autoload Crawler --------------------------------- \\
/**
 *  Creates nodes for all documents in planetary_repo path where there is a mmt-connected content type 
 * associated with that format (based on file extension).  
 */
function mmt_create_nodes() {
  _mmt_crawl_archives();
  return "Success";
}

function _mmt_crawl_archives() {
  $res = planetary_repo_list("");
  foreach ($res as $file) {
    if (planetary_repo_is_dir($file) && $file[0] != '.') {
      _mmt_crawl_archive($file);
    }
  }
}

function _mmt_crawl_archive($path) {
  $mmt_config = variable_get('mmt_config');
  $docbases = array();
  if (isset($mmt_config['docbases'])) {
    $docbases = $mmt_config['docbases'];
  }

  //getting info from manifest
  $mf_path = $path . "/META-INF/MANIFEST.MF";
  
  $manifest = planetary_repo_load_file($mf_path);
  $mf_lines = explode("\n",$manifest);
  $docbase = 'http://docs.omdoc.org/default'; //default
  $archive = 'default'; //default
  foreach ($mf_lines as $line) {
    $pair = explode(":", $line,2);
    if (trim($pair[0]) == "narration-base") {
      $docbase = trim($pair[1]);
    } elseif (trim($pair[0]) == "id") {
      $archive = trim($pair[1]);
    }
  }
  $docbases[$archive] = $docbase;
  $mmt_config['docbases'] = $docbases;
  variable_set('mmt_config', $mmt_config);
  //crawling source folder
  _mmt_crawl_source_folder($archive, $archive . "/source");
}

function _mmt_crawl_source_folder($archive, $path) {
  $mmt_config = variable_get('mmt_config');
  $format = $mmt_config['formats'][$archive];
  $node_type = $mmt_config['node_types'][$format];
  $extension = $mmt_config['extensions'][$format];
  $docbase = $mmt_config['docbases'][$archive];
  $res = planetary_repo_list($path);

  $title = $path;
  if ($path == '') {
    $title = $archive;
  }
  
  $body = '';
  foreach ($res as $file) {
    $fpath = $path . "/" . $file;
    if ($path == '') {
      $fpath = $file;
    }

    if($file[0] != '.') {
      if (planetary_repo_is_dir($fpath)) {  
        _mmt_crawl_source_folder($archive, $fpath);
        $path_info = mmt_get_path_info($fpath);
        $dpath = $path_info['dpath'];
        $body .= '<p><a href="?q='. drupal_encode_path($dpath) .'">' . $file . "</a></p>\n";
      } else {
        $parts = explode('.', $file);
        $ext = $parts[count($parts) - 1];
        if ($ext == $extension) {
          $module = $parts[0];
          $lang = 'und'; //default
          if (count($parts) == 3) {
            $lang = $parts[1];
          }
          $path_info = mmt_get_path_info($fpath);
          $dpath = $path_info['dpath']; 

          mmt_create_node($module, $lang, $format, $dpath, $fpath, $node_type);        
          $body .= '<p><a href="?q='. drupal_encode_path($dpath) .'">' . $file . "</a></p>\n";
        }
      }
    }
  }

  $path_info = mmt_get_path_info($path);
  
  $menupath = $path_info['dpath'];  
  $nid = mmt_create_article($title, $body);
    mmt_save_path($nid, $menupath);
}

function mmt_create_node($module, $lang, $format, $dpath, $location, $node_type) {
  $title = $module;
  $newnode = (object) array(
   'type' => $node_type,
   'uid' => 0,
   'created' => strtotime("now"),
   'changed' => strtotime("now"),
   'status' => 1,
   'comment' => 2,
   'promote' => 0,
   'moderate' => 0,
   'sticky' => 0,
   'language' => $lang
  );

  $newnode->title = $title;
  $newnode->field_external['und']['0']['path'] = $location;
  $newnode->field_external['und']['0']['filter'] = $format;
  $newnode->field_external['und']['0']['dpath']['value'] = $dpath;
  /*
  $newnode->mmt_body['und'][0]['data']
  $newnode->mmt_body['und'][0]['filter'] = $format
  $newnode->mmt_body['und'][0]['path'] = $location
  */

  node_object_prepare($newnode);//necessary ?
  node_save($newnode);
  return $newnode->nid;
}

function mmt_create_article($title, $body) {
  $newnode = (object) array(
   'type' => 'article',
   'uid' => 0,
   'created' => strtotime("now"),
   'changed' => strtotime("now"),
   'status' => 1,
   'comment' => 2,
   'promote' => 0,
   'moderate' => 0,
   'sticky' => 0,
   'language' => 'und'
  );
  $newnode->title = $title;
  $newnode->body['und'][0]['value'] = $body;
  $newnode->body['und'][0]['summary'] = $body;  
  $newnode->body['und'][0]['format'] = 'filtered_html';  

  node_object_prepare($newnode);//necessary ?
  node_save($newnode);
  return $newnode->nid;

}
# ------------------------------ End MMT Autoload Crawler --------------------------------- #

# ------------------------------ Other Hooks --------------------------------- #
/**
 * implements hook_form_alter, adds URI field to mmt-specific forms
 */
function mmt_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'mmtdoc_node_form') { 
    if(array_key_exists('nid', $form_state['node'])) { //editing existing node
       $location = $form_state['node']->field_external['und']['0']['path']; 
       $path_info = mmt_get_path_info($location);
       global $filter_context;
       $filter_context = array();
       $filter_context['mmt'] = $path_info;

    }
  }
}

/**
 * implements hook_node_insert
 */
function mmt_node_insert($node) {
  if ($node->type == 'glossary' || $node->type == 'mmtdoc') {
    $nid = $node->nid;
    $dpath = $node->field_external['und']['0']['dpath']['value'];
    mmt_save_path($nid, $dpath);
  }
}

/**
 * implements hook_node_view, renders mmt-specific nodes by loading html from MMT instance
 */
function mmt_node_view($node, $view_mode, $langcode) {
	if ($view_mode != "full")
		return;

  if ($node->type == 'glossary' || $node->type == 'mmtdoc') {
    $inst_id = mmt_initialize();

    $result = db_query('SELECT e.field_lc_elid_value, t.field_lc_type_value, n.entity_id, node.title
      FROM {field_data_field_lc_nid} n
      INNER JOIN {field_data_field_lc_elid} e
       ON n.entity_id = e.entity_id
      INNER JOIN {field_data_field_lc_type} t
        ON n.entity_id = t.entity_id
      INNER JOIN {node}
        ON n.entity_id = node.nid
      WHERE n.field_lc_nid_value = :nid',
      array(':nid' => $node->nid));

    foreach ($result as $record) {
        $nid = $record->entity_id;
        $nid = str_replace("\r", '', $nid);
        $nid = str_replace("\n", '', $nid);
        $elid = $record->field_lc_elid_value; 
        $elid = str_replace("\r", '', $elid);
        $elid = str_replace("\n", '', $elid);
        $type = $record->field_lc_type_value;
        $type = str_replace("\r", '', $type);
        $type = str_replace("\n", '', $type);
        $title = $record->title;
        $icon = $type;
        if ($icon == "question") {
          $icon = "warning"; //temporarily using this icon until question available in JOBAD
        }
        $options = array();
        $options['class'] = $icon;
        $options['text'] = $title;
        $options['click'] = 'function() {window.open("?q=node/' . $nid . '");}';
        if ($type == "question") {
           $options['menu'] = '{"Answer" : function(){window.open("?q=node/' . $nid . '");}}';
        }
        if ($type == "error") {
           $options['menu'] = '{"Fix" : function(){window.open("?q=node/' . $node->nid . '/edit", "_self");}}';
        }

        jobad_add_to_sidebar($inst_id, '$(document.getElementById("' . $elid . '"))', $options);
    }

    $content = $node->content['field_external'][0]['content']['#markup'];
    $node->content['field_external'][0]['content']['#markup'] = '<div id="' . $inst_id . '" class="bootstrap" >' . $content . '</div>'; 
  }
}

# ----------------------------- End Other Hookds ------------------------------ #

//------------------------------ MMT Formatter ---------------------------------\\
function mmt_field_formatter_info() {
   return array(
   // This formatter changes the background color of the content region.
    'mmt_formatter' => array(
      'label' => t('Formatter of MMT content'),
      'field types' => array('vfs_file'),
    ),
  );
}

function mmt_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
    case 'mmt_formatter':
      $lang = $entity->language;
      foreach ($items as $delta => $item) {
        $location = $item['path'];

        $path_info = mmt_get_path_info($location);

        global $filter_context;
        $filter_context = array();
        $filter_context['mmt']['dpath'] = $path_info['dpath'];
        $content = planetary_repo_load_file($location);
        global $filter_debug;
        $filter_debug = array();
        $markup = check_markup($content, $item['filter'], $lang);
        $element[$delta] = array(
          "#type" => "container",
          '#attributes' => array(
               'class' => array('contextual-links-region'),
               ),
          "context_links" =>
          array(
          "#type" => "contextual_links",
          "#contextual_links" => $filter_debug
          ),
          "content" =>
          array(
          '#markup' => $markup,
          )
          );
      }
      break;
    }
  return $element;
}

# ------------------------------- End MMT Formatter ------------------------------- #
################################## END MAIN HOOKS ##################################
                                                 
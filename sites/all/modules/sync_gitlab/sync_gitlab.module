<?php
/**
 * @file
 * A module that synchronizes the drupal accounts with gitlab accounts.
 * @bug  account names in drupal and account names in gitlab have different rules! Unify them to allow 
 *       synchronisation.
 *       dummy password!!!
 *       
 */

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 * @todo add 'vendor url', 'download url' etc. in case we make the libarary stand alone
 */
function sync_gitlab_libraries_info() {

  $libraries['gitlab_api_php_wrapper'] = array(  // @nolint
    'name' => 'GitLab API PHP Wrapper',
    'vendor url' => '', 
    'download url' => '', 
    'version arguments' => array(
      'file' => 'readme.txt',
      'pattern' => '/Version (\d+)/', 
      'lines' => 5,
    ),
    'files' => array(
      'php' => array('Users.php'),
      ),
    );
  return $libraries;
}


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function sync_gitlab_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sync_gitlab':
      $output = '';
      $output .= '<h3>'.t('About').'</h3>';
      $output .= '<p>'.t('A module that synchronizes the drupal accounts with
                  gitlab accounts.').'</p>';
      return $output;
      break;
  }
} 

/**
 * Implements hook_menu().
 *
 * The function sync_gitlab_menu implements the hook_menu and allows therefore 
 * to display the configuration menu.
 */
function sync_gitlab_menu() {
  $items = array();
  $items['admin/config/system/sync_gitlab'] = array(
    'title' => 'Sync GitLab',
    'description' => 'Configuration for Sync GitLab module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sync_gitlab_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Page callback: Sync GitLab settings
 *
 * @see sync_gitlab_menu()
 */
function sync_gitlab_form($form, &$form_state) {
  $form['sync_gitlab_private_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Token of GitLab Server administrator account'),
    '#default_value' => variable_get('sync_gitlab_private_token', ''),
    '#size' => 20,
    '#maxlength' => 128,
    '#description' => t('The private token needed for authentication with the
      GitLab server.'),
    '#required' => true,
  );
  $form['sync_gitlab_server_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Server URL of GitLab Server'),
    '#default_value' => variable_get('sync_gitlab_server_api_url', ''),
    '#size' => 128,
    '#maxlength' => 512,
    '#description' => t('The Server URL of the GitLab Server. Should be in the 
      form of "http://serverURL/api/v3". Needed to be able to connect to it.'),
    '#required' => true,
  );
  $form['sync_gitlab_admin_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin ID of gitlab account'),
    '#default_value' => variable_get('sync_gitlab_admin_id', 1),
    '#size' => 4,
    '#maxlength' => 8,
    '#description' => t('The Admin ID of the admin account. Has to correspond
      to the private token.'),
    '#required' => true,
  );
    $form['sync_gitlab_log_messages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log Module Messages'),
    '#default_value' => variable_get('sync_gitlab_log_messages', 1),
    '#description' => t('Wheter or not the module should create log files.'),
    '#required' => false,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_user_delete().
 *
 * The function sync_gitlab_user_delete deletes the specified GitLab account.
 *
 * @param account
 *   The account that is being deleted from gitlab  
 */
function sync_gitlab_user_delete($account) {
  // load GitLab API PHP Wrapper
  if (($library = libraries_load('gitlab_api_php_wrapper')) // @nolint 
       && !empty($library['loaded'])) {
    // create new request
    try {
      $request = new GitLabAPI\Users(variable_get('sync_gitlab_private_token'),
                                 variable_get('sync_gitlab_admin_id'),
                                 variable_get('sync_gitlab_server_api_url'));
    } 
    catch (RuntimeException $e) {
      if (variable_get('sync_gitlab_log_messages') === 1) {
        watchdog('sync_gitlab', 
                 'Error in Sync GitLab: %info.', 
                 array('%info' => $e->getMessage()),
                 WATCHDOG_ERROR, 
                 '');
      }
      return;
    }
    // get GitLab ID
    try {
      $user_id = $request->getUserID($account->mail);
    } 
    catch (RuntimeException $e) {
      if (variable_get('sync_gitlab_log_messages') === 1) {
        watchdog('sync_gitlab', 
                 'Error in Sync GitLab: %info.', 
                 array('%info' => $e->getMessage()),
                 WATCHDOG_ERROR, 
                 '');
      }
      return;
    }
    // delete user from GitLab
    try {
      $request->deleteUser($user_id);
    } 
    catch (RuntimeException $e) {
      if (variable_get('sync_gitlab_log_messages') === 1) {
        watchdog('sync_gitlab', 
                 'Error in Sync GitLab: %info.', 
                 array('%info' => $e->getMessage()),
                 WATCHDOG_ERROR, 
                 '');
      }
      return;
    }
    // we performed the request without errors. 
    if (variable_get('sync_gitlab_log_messages') === 1) {
      watchdog('sync_gitlab',
               'Deleted GitLab User succesfully.',
               array(),
               WATCHDOG_NOTICE,
               '');
    }
    return;
  }
}

/**
 * Implements hook_user_insert().
 *
 * The function sync_gitlab_user_insert creates the specified GitLab account.
 *
 * @param edit
 *   The array of form values submitted by the user.
 * @param account
 *   The user object on which the operation is being performed.
 * @param category
 *   The active category of user information being edited.  
 * @bug The password has to be set at creation !
 */
function sync_gitlab_user_insert(&$edit, $account, $category) {
  // load GitLab API PHP Wrapper
  if (($library = libraries_load('gitlab_api_php_wrapper')) // @nolint
       && !empty($library['loaded'])) {
    // create new request
    try {
      $request = new GitLabAPI\Users(variable_get('sync_gitlab_private_token'),
                                 variable_get('sync_gitlab_admin_id'),
                                 variable_get('sync_gitlab_server_api_url'));
    } 
    catch (RuntimeException $e) {
      if (variable_get('sync_gitlab_log_messages') === 1) {
        watchdog('sync_gitlab', 
                 'Error in Sync GitLab: %info.', 
                 array('%info' => $e->getMessage()),
                 WATCHDOG_ERROR, 
                 '');
      }
      return;
    }
    // create user in GitLab
    try {
      $request->createUser($edit['name'], $edit['name'], 'dummypassword', $edit['mail']); // @nolint
    } 
    catch (RuntimeException $e) {
      if (variable_get('sync_gitlab_log_messages') === 1) {
        watchdog('sync_gitlab', 
                 'Error in Sync GitLab: %info.', 
                 array('%info' => $e->getMessage()),
                 WATCHDOG_ERROR, 
                 '');
      }
      return;
    }
    // we performed the request without errors. 
    if (variable_get('sync_gitlab_log_messages') === 1) {
      watchdog('sync_gitlab',
               'Created GitLab User succesfully.',
               array(),
               WATCHDOG_NOTICE,
               '');
    }
    return;
  }
}

/**
 * Implements hook_user_update().
 *
 * The function sync_gitlab_user_update modifies the specified GitLab account.
 *
 * @param edit
 *   The array of form values submitted by the user.
 * @param account
 *   The user object on which the operation is performed.
 * @param category
 *   The active category of user information being edited.  
 *
 * @todo Handle $account->status changes in this hook, when it is implemented 
 * on the GitLab API. Add more fields if implemented in MathHub 
 *
 */
function sync_gitlab_user_update(&$edit, $account, $category) {  
  // send api call if we change some user values
  if ($account->name != $account->original->name 
      || $account->mail != $account->original->mail) {
    // load GitLab API PHP Wrapper
    if (($library = libraries_load('gitlab_api_php_wrapper')) // @nolint
         && !empty($library['loaded'])) {
      // create new request
      try {
        $request = new GitLabAPI\Users(variable_get('sync_gitlab_private_token'),
                                   variable_get('sync_gitlab_admin_id'),
                                   variable_get('sync_gitlab_server_api_url'));
      } 
      catch (RuntimeException $e) {
        if (variable_get('sync_gitlab_log_messages') === 1) {
          watchdog('sync_gitlab', 
                   'Error in Sync GitLab: %info.', 
                   array('%info' => $e->getMessage()),
                   WATCHDOG_ERROR, 
                   '');
        }
        return;
      }
      // get GitLab ID
      try {
        $user_id = $request->getUserID($account->mail);
      } 
      catch (RuntimeException $e) {
        if (variable_get('sync_gitlab_log_messages') === 1) {
          watchdog('sync_gitlab', 
                   'Error in Sync GitLab: %info.', 
                   array('%info' => $e->getMessage()),
                   WATCHDOG_ERROR, 
                   '');
        }
        return;
      }
      // data which is send with the api call
      $data = array();
      // check if data exists
      if (isset($edit['name'])) {
        $data['username'] = $edit['name'];
      }
      if (isset($edit['name'])) {
        $data['name'] = $edit['name'];
      }
      if (isset($edit['mail'])) {
        $data['email'] = $edit['mail'];
      }
      // edit user in GitLab
      try {
        $request->editUser($user_id, $data);
      } 
      catch (RuntimeException $e) {
        if (variable_get('sync_gitlab_log_messages') === 1) {
          watchdog('sync_gitlab', 
                   'Error in Sync GitLab: %info.', 
                   array('%info' => $e->getMessage()),
                   WATCHDOG_ERROR, 
                   '');
        }
        return;
      }
      // we performed the request without errors. 
      if (variable_get('sync_gitlab_log_messages') === 1) {
        watchdog('sync_gitlab',
                 'Updated GitLab User succesfully.',
                 array(),
                 WATCHDOG_NOTICE,
                 '');
      }
      return;
    }
  }
}
<?php

function latexml_update_errors($nid, $location) {
  $path_info = pathinfo($location);
  //getting omdoc location
  $base_relpath = oaff_join_path(array($path_info['dirname'], $path_info['filename']));
  //getting log location
  $pathinfo = oaff_get_path_info($location);
  $base = oaff_join_path(array($pathinfo['group'], $pathinfo['archive']));
  $rel_parent = $pathinfo['rel_parent'];
  $basename = $pathinfo['module'];
  $log_filename = $basename . '.ltxlog';
  $log_def_location = oaff_join_path(array($base, "errors", "latexml", $rel_parent, $log_filename));
  $log_bck_location = $base_relpath . '.ltxlog';
  if ((planetary_repo_stat_file($log_def_location) == null && planetary_repo_stat_file($log_bck_location) == null)) { //something failed
    // TODO add a message to status
    oaff_log("LATEXML", "Could not find .log or .omdoc file for $base_relpath (generation failed)");
    $latexml_status = array("conversion" => 3, "messages" => array(array('shortMsg' => " fatal error, conversion failed (no latexml log)", 
                            'longMsg' => "expected log to be at $log_def_location or $log_bck_location", 'type' => "Fatal")));   
  } else {
    $log_location = $log_def_location; 
    if (planetary_repo_stat_file($log_location) == null) {
      $log_location = $log_bck_location;
    }
    $log = planetary_repo_load_file($log_location);
    $mtime = planetary_repo_stat_file($log_location)['mtime'];
    $last_ran_time = oaff_get_mtime($nid, $log_location);

    if ($last_ran_time == $mtime && false) { //no change
      $latexml_status = array("conversion" => -1, "messages" => array()); // -1 means log not changed  
      oaff_log("OAFF(LATEXML)", "No change for compiler latexml, no need to re-process errors");
    } else {      
      $latexml_status = _latexml_produce_status_msg($log, $location);
      oaff_log("OAFF(LATEXML)", "Re-read log for compiler latexml");
      oaff_set_mtime($nid, $mtime, $log_location);
    }
  }
  //saving error status
  oaff_save_error_status($nid, 'latexml', $latexml_status);
  return $latexml_status;
}

function _latexml_produce_status_msg($log, $location) {
  $status = array();
  $status['messages'] = array();
  $log_lines = explode("\n", $log);
  
  $msgline_pattern = '/^([^ :]+)\:([^ :]+)\:([^ ]+)(\s(.*))?$/';
  $details_pattern = '/^\t(.*)/';

  $current_message = array();
  $last_is_msg = false;
  
  for ($i = 0; $i < count($log_lines); $i++) {
    $line = $log_lines[$i];
    $matches = array();
    $is_msg_line = preg_match($msgline_pattern, $line, $matches);
    if ($is_msg_line) {
      $last_is_msg = true;
      if (isset($current_message['type'])) { // have to save previous msg
        $status['messages'][] = $current_message;
        $current_message = array();
      }
      if ($matches[1] == 'Status') {
        $status['conversion'] = $matches[3];
      } else if ($matches[1] == "Info" || $matches[1] == "Warning" || $matches[1] == "Error" || $matches[1] == "Fatal") {
        $current_message['type'] = $matches[1];
        $current_message['shortMsg'] = $matches[5];
        $current_message['longMsg'] = '';
      } else {
        drupal_set_message("Found unknown error type : " . $matches[1], 'warning');
      }
    } else {
      $is_details_line = preg_match($details_pattern, $line, $matches);
      if ($is_details_line && $last_is_msg) {
        if (isset($current_message['srcref'])) {
          $current_message['longMsg'] .=  $line . "\n";
        } else { // this is the source ref line
          $trange_pattern = '/^(.*)textrange\(from=(\d*);(\d*),to=(\d*);(\d*)\)/';
          $valid_trange = preg_match($trange_pattern, $line, $matches);
          if ($valid_trange && strpos($matches[1], $location) !== false) {
            $current_message["srcref"] = array();
            $current_message["srcref"]['from'] = array();
            $current_message["srcref"]['from']['line'] = $matches[2] + 1; // oaff standard is that lines nr starts at 1 not 0
            $current_message["srcref"]['from']['col'] = $matches[3] + 1; // oaff standard is that column nr starts at 1 not 0
            $current_message["srcref"]['to'] = array();
            $current_message["srcref"]['to']['line'] = $matches[4] + 1; // oaff standard is that lines nr starts at 1 not 0
            $current_message["srcref"]['to']['col'] = $matches[5] + 1;  // oaff standard is that column nr starts at 1 not 0
          } else {
            // no source ref, adding to long message
            $current_message['longMsg'] .= $line . "\n";
          }
        }
      } else { // random line, skipping and setting message 
        $last_is_msg = false;
      }
    }
  }
  if (isset($current_message['type'])) { // have to save last msg
    $status['messages'][] = $current_message;
    $current_message = array();
  }
  return $status;
}

function latexml_filter_info() {
  $filters = array();
  $filters['local-compilation'] = array(
    'title' => t('Local LateXML Compilation filter'),
    'description' => t('The TeX(t) will be compiled by LateXML to produce XML'),
    'process callback' => 'latexml_filter_local_process',
    'default settings' => array(
      'latexml_profile' => 'math',
      'latexml_preamble' => '',
    ),
    'settings callback' => 'latexml_filter_local_settings',
  );
  return $filters;
}

function latexml_filter_local_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_debug;
  $args = explode(" ", $text);
  $nid = $args[0];
  $fpath = $args[1];
  latexml_update_errors($nid, $fpath);

  //dont change input
  return $text;
}

function latexml_filter_local_settings($form, $form_state, $filter, $format, $defaults) {
  $settings = array();
  $settings['latexml_profile'] = array(
    '#type' => 'textfield',
    '#title' => t('LateXML Profile'),
    '#default_value' => isset($filter->settings['latexml_profile']) ? $filter->settings['latexml_profile'] : $defaults['latexml_profile'],
    '#description' => t('The name of the LateXML profile to be used'),
  );

  $settings['latexml_preamble'] = array(
    '#type' => 'textarea',
    '#title' => t('LateXML Preamble'),
    '#default_value' => isset($filter->settings['latexml_preamble']) ? $filter->settings['latexml_preamble'] : $defaults['latexml_preamble'],
    '#description' => t('The LateXML preamble to be used'),
  );
  return $settings;
}